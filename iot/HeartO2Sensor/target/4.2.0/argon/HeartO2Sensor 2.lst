
/Users/natnaeldaba/Documents/Documents/Academia/UofA/Third_Semester/ECE_513_Web_dev_and_IoT/final_project/heart-rate-monitoring-system-design/iot/HeartO2Sensor/target/4.2.0/argon/HeartO2Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003204  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7220  000b7220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b7244  000b7244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b724c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a8  000b7250  0001e5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  2003e618  2003e618  0002e618  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b72c0  000b72c0  000272c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b72e8  000b72e8  000272e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00113c57  00000000  00000000  000272ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011e8b  00000000  00000000  0013af43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003929c  00000000  00000000  0014cdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000028f8  00000000  00000000  0018606a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a0d8  00000000  00000000  00188962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037e6b  00000000  00000000  00192a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d1ed  00000000  00000000  001ca8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001383e9  00000000  00000000  00207a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000075d8  00000000  00000000  0033fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe9d 	bl	b6d6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fea5 	bl	b6d88 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5a8 	.word	0x2003e5a8
   b4048:	000b7250 	.word	0x000b7250
   b404c:	2003e618 	.word	0x2003e618
   b4050:	2003e618 	.word	0x2003e618
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ff23 	bl	b5ea8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b71fc 	.word	0x000b71fc
   b407c:	000b7220 	.word	0x000b7220

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f857 	bl	b4138 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bec3 	b.w	b5e18 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bdf5 	b.w	b4c80 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bdf3 	b.w	b4c80 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bdf9 	b.w	b4c90 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
float beatsPerMinute;
int beatAvg;
int loopCounter = 0;

void setup()
{
   b40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200);
   b40b2:	f001 fdf5 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b40b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40ba:	f001 fde5 	bl	b5c88 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   b40be:	f001 fdef 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b40c2:	4918      	ldr	r1, [pc, #96]	; (b4124 <setup+0x74>)
   b40c4:	f001 fb3b 	bl	b573e <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   b40c8:	f001 ff3c 	bl	b5f44 <_Z19__fetch_global_Wirev>
   b40cc:	4a16      	ldr	r2, [pc, #88]	; (b4128 <setup+0x78>)
   b40ce:	4601      	mov	r1, r0
   b40d0:	2357      	movs	r3, #87	; 0x57
   b40d2:	4816      	ldr	r0, [pc, #88]	; (b412c <setup+0x7c>)
   b40d4:	f000 fa18 	bl	b4508 <_ZN8MAX301055beginER7TwoWiremh>
   b40d8:	b928      	cbnz	r0, b40e6 <setup+0x36>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
   b40da:	f001 fde1 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b40de:	4914      	ldr	r1, [pc, #80]	; (b4130 <setup+0x80>)
   b40e0:	f001 fb2d 	bl	b573e <_ZN5Print7printlnEPKc>
    while (1);
   b40e4:	e7fe      	b.n	b40e4 <setup+0x34>
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
   b40e6:	f001 fddb 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b40ea:	4912      	ldr	r1, [pc, #72]	; (b4134 <setup+0x84>)
   b40ec:	f001 fb27 	bl	b573e <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
   b40f0:	f240 139b 	movw	r3, #411	; 0x19b
   b40f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b40f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b40fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
   b4100:	9300      	str	r3, [sp, #0]
   b4102:	2204      	movs	r2, #4
   b4104:	2303      	movs	r3, #3
   b4106:	4809      	ldr	r0, [pc, #36]	; (b412c <setup+0x7c>)
   b4108:	211f      	movs	r1, #31
   b410a:	f000 fabd 	bl	b4688 <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
   b410e:	4807      	ldr	r0, [pc, #28]	; (b412c <setup+0x7c>)
   b4110:	210a      	movs	r1, #10
   b4112:	f000 fa29 	bl	b4568 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   b4116:	4805      	ldr	r0, [pc, #20]	; (b412c <setup+0x7c>)
   b4118:	2100      	movs	r1, #0
}
   b411a:	b005      	add	sp, #20
   b411c:	f85d eb04 	ldr.w	lr, [sp], #4
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
   b4120:	f000 ba2c 	b.w	b457c <_ZN8MAX3010522setPulseAmplitudeGreenEh>
   b4124:	000b6f20 	.word	0x000b6f20
   b4128:	00061a80 	.word	0x00061a80
   b412c:	2003e62c 	.word	0x2003e62c
   b4130:	000b6f30 	.word	0x000b6f30
   b4134:	000b6f64 	.word	0x000b6f64

000b4138 <loop>:

void loop()
{
   b4138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  long irValue = particleSensor.getIR();
   b413c:	4861      	ldr	r0, [pc, #388]	; (b42c4 <loop+0x18c>)
   b413e:	4d62      	ldr	r5, [pc, #392]	; (b42c8 <loop+0x190>)
   b4140:	4f62      	ldr	r7, [pc, #392]	; (b42cc <loop+0x194>)
{
   b4142:	b089      	sub	sp, #36	; 0x24
  long irValue = particleSensor.getIR();
   b4144:	f000 f9c8 	bl	b44d8 <_ZN8MAX301055getIREv>
   b4148:	4604      	mov	r4, r0
   b414a:	4606      	mov	r6, r0

  if (checkForBeat(irValue) == true)
   b414c:	f000 fb86 	bl	b485c <_Z12checkForBeatl>
   b4150:	2800      	cmp	r0, #0
   b4152:	d040      	beq.n	b41d6 <loop+0x9e>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
   b4154:	f8df 91ac 	ldr.w	r9, [pc, #428]	; b4304 <loop+0x1cc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4158:	f000 fbfe 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
   b415c:	f8d9 3000 	ldr.w	r3, [r9]
   b4160:	eba0 0803 	sub.w	r8, r0, r3
   b4164:	f000 fbf8 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
   b4168:	f8c9 0000 	str.w	r0, [r9]

    beatsPerMinute = 60 / (delta / 1000.0);
   b416c:	4640      	mov	r0, r8
   b416e:	f002 f8a5 	bl	b62bc <__aeabi_i2d>
   b4172:	4b57      	ldr	r3, [pc, #348]	; (b42d0 <loop+0x198>)
   b4174:	2200      	movs	r2, #0
   b4176:	f002 fa35 	bl	b65e4 <__aeabi_ddiv>
   b417a:	4602      	mov	r2, r0
   b417c:	460b      	mov	r3, r1
   b417e:	2000      	movs	r0, #0
   b4180:	4954      	ldr	r1, [pc, #336]	; (b42d4 <loop+0x19c>)
   b4182:	f002 fa2f 	bl	b65e4 <__aeabi_ddiv>
   b4186:	f002 fbfb 	bl	b6980 <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   b418a:	ed9f 7a53 	vldr	s14, [pc, #332]	; b42d8 <loop+0x1a0>
    beatsPerMinute = 60 / (delta / 1000.0);
   b418e:	6028      	str	r0, [r5, #0]
   b4190:	ee07 0a90 	vmov	s15, r0
    if (beatsPerMinute < 255 && beatsPerMinute > 20)
   b4194:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b419c:	d51b      	bpl.n	b41d6 <loop+0x9e>
   b419e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
   b41a2:	eef4 7ac7 	vcmpe.f32	s15, s14
   b41a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b41aa:	dd14      	ble.n	b41d6 <loop+0x9e>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
   b41ac:	484b      	ldr	r0, [pc, #300]	; (b42dc <loop+0x1a4>)
   b41ae:	494c      	ldr	r1, [pc, #304]	; (b42e0 <loop+0x1a8>)
   b41b0:	7802      	ldrb	r2, [r0, #0]
   b41b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b41b6:	ee17 3a90 	vmov	r3, s15
   b41ba:	548b      	strb	r3, [r1, r2]
   b41bc:	3201      	adds	r2, #1
      rateSpot %= RATE_SIZE; //Wrap variable
   b41be:	f002 0203 	and.w	r2, r2, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
   b41c2:	784b      	ldrb	r3, [r1, #1]
      rateSpot %= RATE_SIZE; //Wrap variable
   b41c4:	7002      	strb	r2, [r0, #0]
        beatAvg += rates[x];
   b41c6:	780a      	ldrb	r2, [r1, #0]
   b41c8:	4413      	add	r3, r2
   b41ca:	788a      	ldrb	r2, [r1, #2]
   b41cc:	4413      	add	r3, r2
   b41ce:	78ca      	ldrb	r2, [r1, #3]
   b41d0:	4413      	add	r3, r2
      beatAvg /= RATE_SIZE;
   b41d2:	109b      	asrs	r3, r3, #2
   b41d4:	603b      	str	r3, [r7, #0]
    }
  }

  Serial.print("IR=");
   b41d6:	f001 fd63 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b41da:	4942      	ldr	r1, [pc, #264]	; (b42e4 <loop+0x1ac>)
   b41dc:	f001 fa9c 	bl	b5718 <_ZN5Print5printEPKc>
  Serial.print(irValue);
   b41e0:	f001 fd5e 	bl	b5ca0 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41e4:	2c00      	cmp	r4, #0
   b41e6:	4680      	mov	r8, r0
   b41e8:	da03      	bge.n	b41f2 <loop+0xba>
            t = print('-');
   b41ea:	212d      	movs	r1, #45	; 0x2d
   b41ec:	f001 fa98 	bl	b5720 <_ZN5Print5printEc>
            val = -n;
   b41f0:	4264      	negs	r4, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41f2:	220a      	movs	r2, #10
   b41f4:	4621      	mov	r1, r4
   b41f6:	4640      	mov	r0, r8
   b41f8:	f001 faab 	bl	b5752 <_ZN5Print11printNumberEmh>
  Serial.print(", BPM=");
   b41fc:	f001 fd50 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b4200:	4939      	ldr	r1, [pc, #228]	; (b42e8 <loop+0x1b0>)
   b4202:	f001 fa89 	bl	b5718 <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
   b4206:	f001 fd4b 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b420a:	ed95 0a00 	vldr	s0, [r5]
   b420e:	2102      	movs	r1, #2
   b4210:	f001 fb86 	bl	b5920 <_ZN5Print5printEfi>
  Serial.print(", Avg BPM=");
   b4214:	f001 fd44 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b4218:	4934      	ldr	r1, [pc, #208]	; (b42ec <loop+0x1b4>)
   b421a:	f001 fa7d 	bl	b5718 <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
   b421e:	f001 fd3f 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b4222:	683c      	ldr	r4, [r7, #0]
        if (n < 0 && base == 10) {
   b4224:	2c00      	cmp	r4, #0
   b4226:	4680      	mov	r8, r0
   b4228:	da49      	bge.n	b42be <loop+0x186>
            t = print('-');
   b422a:	212d      	movs	r1, #45	; 0x2d
   b422c:	f001 fa78 	bl	b5720 <_ZN5Print5printEc>
            val = -n;
   b4230:	4261      	negs	r1, r4

  // write a code that checks if loopCounter > 1000 and if so, perform
  // particle.publish() and reset loopCounter to 0
  loopCounter++;
   b4232:	4f2f      	ldr	r7, [pc, #188]	; (b42f0 <loop+0x1b8>)
        return printNumber(val, base) + t;
   b4234:	220a      	movs	r2, #10
   b4236:	4640      	mov	r0, r8
   b4238:	f001 fa8b 	bl	b5752 <_ZN5Print11printNumberEmh>
   b423c:	683b      	ldr	r3, [r7, #0]
   b423e:	3301      	adds	r3, #1
  if (loopCounter > 100) {
   b4240:	2b64      	cmp	r3, #100	; 0x64
  loopCounter++;
   b4242:	603b      	str	r3, [r7, #0]
  if (loopCounter > 100) {
   b4244:	dd2b      	ble.n	b429e <loop+0x166>
    Particle.publish("heartrate", String(beatsPerMinute), PRIVATE);
   b4246:	ed95 0a00 	vldr	s0, [r5]
   b424a:	2106      	movs	r1, #6
   b424c:	a804      	add	r0, sp, #16
   b424e:	f001 fc3a 	bl	b5ac6 <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4252:	4b28      	ldr	r3, [pc, #160]	; (b42f4 <loop+0x1bc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4254:	9a04      	ldr	r2, [sp, #16]
   b4256:	781b      	ldrb	r3, [r3, #0]
   b4258:	f88d 3000 	strb.w	r3, [sp]
   b425c:	4926      	ldr	r1, [pc, #152]	; (b42f8 <loop+0x1c0>)
   b425e:	233c      	movs	r3, #60	; 0x3c
   b4260:	a802      	add	r0, sp, #8
   b4262:	f000 fec7 	bl	b4ff4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4266:	9c03      	ldr	r4, [sp, #12]
   b4268:	b17c      	cbz	r4, b428a <loop+0x152>
      if (--_M_use_count == 0)
   b426a:	6863      	ldr	r3, [r4, #4]
   b426c:	3b01      	subs	r3, #1
   b426e:	6063      	str	r3, [r4, #4]
   b4270:	b95b      	cbnz	r3, b428a <loop+0x152>
          _M_dispose();
   b4272:	6823      	ldr	r3, [r4, #0]
   b4274:	4620      	mov	r0, r4
   b4276:	689b      	ldr	r3, [r3, #8]
   b4278:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b427a:	68a3      	ldr	r3, [r4, #8]
   b427c:	3b01      	subs	r3, #1
   b427e:	60a3      	str	r3, [r4, #8]
   b4280:	b91b      	cbnz	r3, b428a <loop+0x152>
            _M_destroy();
   b4282:	6823      	ldr	r3, [r4, #0]
   b4284:	4620      	mov	r0, r4
   b4286:	68db      	ldr	r3, [r3, #12]
   b4288:	4798      	blx	r3
   b428a:	a804      	add	r0, sp, #16
   b428c:	f001 fbbe 	bl	b5a0c <_ZN6StringD1Ev>
    Serial.print(", published");
   b4290:	f001 fd06 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b4294:	4919      	ldr	r1, [pc, #100]	; (b42fc <loop+0x1c4>)
   b4296:	f001 fa3f 	bl	b5718 <_ZN5Print5printEPKc>
    loopCounter = 0;
   b429a:	2300      	movs	r3, #0
   b429c:	603b      	str	r3, [r7, #0]
  }
  
  if (irValue < 50000)
   b429e:	f24c 334f 	movw	r3, #49999	; 0xc34f
   b42a2:	429e      	cmp	r6, r3
   b42a4:	dc04      	bgt.n	b42b0 <loop+0x178>
    Serial.print(" No finger?");
   b42a6:	f001 fcfb 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b42aa:	4915      	ldr	r1, [pc, #84]	; (b4300 <loop+0x1c8>)
   b42ac:	f001 fa34 	bl	b5718 <_ZN5Print5printEPKc>

  Serial.println();
   b42b0:	f001 fcf6 	bl	b5ca0 <_Z16_fetch_usbserialv>
}
   b42b4:	b009      	add	sp, #36	; 0x24
   b42b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Serial.println();
   b42ba:	f001 ba34 	b.w	b5726 <_ZN5Print7printlnEv>
            val = n;
   b42be:	4621      	mov	r1, r4
   b42c0:	e7b7      	b.n	b4232 <loop+0xfa>
   b42c2:	bf00      	nop
   b42c4:	2003e62c 	.word	0x2003e62c
   b42c8:	2003e620 	.word	0x2003e620
   b42cc:	2003e61c 	.word	0x2003e61c
   b42d0:	408f4000 	.word	0x408f4000
   b42d4:	404e0000 	.word	0x404e0000
   b42d8:	437f0000 	.word	0x437f0000
   b42dc:	2003e668 	.word	0x2003e668
   b42e0:	2003e669 	.word	0x2003e669
   b42e4:	000b6fa0 	.word	0x000b6fa0
   b42e8:	000b6fa4 	.word	0x000b6fa4
   b42ec:	000b6fab 	.word	0x000b6fab
   b42f0:	2003e628 	.word	0x2003e628
   b42f4:	2003e618 	.word	0x2003e618
   b42f8:	000b6fb6 	.word	0x000b6fb6
   b42fc:	000b6fc0 	.word	0x000b6fc0
   b4300:	000b6fcc 	.word	0x000b6fcc
   b4304:	2003e624 	.word	0x2003e624

000b4308 <_GLOBAL__sub_I_particleSensor>:
        val_(val) {
   b4308:	4b02      	ldr	r3, [pc, #8]	; (b4314 <_GLOBAL__sub_I_particleSensor+0xc>)
MAX30105 particleSensor;
   b430a:	4803      	ldr	r0, [pc, #12]	; (b4318 <_GLOBAL__sub_I_particleSensor+0x10>)
   b430c:	2201      	movs	r2, #1
   b430e:	701a      	strb	r2, [r3, #0]
   b4310:	f000 b804 	b.w	b431c <_ZN8MAX30105C1Ev>
   b4314:	2003e618 	.word	0x2003e618
   b4318:	2003e62c 	.word	0x2003e62c

000b431c <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   b431c:	4770      	bx	lr

000b431e <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b431e:	b570      	push	{r4, r5, r6, lr}
   b4320:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b4322:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b4324:	4616      	mov	r6, r2
   b4326:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   b4328:	f001 f88e 	bl	b5448 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b432c:	6820      	ldr	r0, [r4, #0]
   b432e:	6803      	ldr	r3, [r0, #0]
   b4330:	4631      	mov	r1, r6
   b4332:	689b      	ldr	r3, [r3, #8]
   b4334:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   b4336:	2100      	movs	r1, #0
   b4338:	6820      	ldr	r0, [r4, #0]
   b433a:	f001 f88c 	bl	b5456 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   b433e:	6820      	ldr	r0, [r4, #0]
   b4340:	2201      	movs	r2, #1
   b4342:	4629      	mov	r1, r5
   b4344:	f001 f87d 	bl	b5442 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b4348:	6820      	ldr	r0, [r4, #0]
   b434a:	6803      	ldr	r3, [r0, #0]
   b434c:	691b      	ldr	r3, [r3, #16]
   b434e:	4798      	blx	r3
   b4350:	b120      	cbz	r0, b435c <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   b4352:	6820      	ldr	r0, [r4, #0]
   b4354:	6803      	ldr	r3, [r0, #0]
   b4356:	695b      	ldr	r3, [r3, #20]
   b4358:	4798      	blx	r3
   b435a:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   b435c:	bd70      	pop	{r4, r5, r6, pc}

000b435e <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   b435e:	7901      	ldrb	r1, [r0, #4]
   b4360:	2204      	movs	r2, #4
   b4362:	f7ff bfdc 	b.w	b431e <_ZN8MAX3010513readRegister8Ehh>

000b4366 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   b4366:	7901      	ldrb	r1, [r0, #4]
   b4368:	2206      	movs	r2, #6
   b436a:	f7ff bfd8 	b.w	b431e <_ZN8MAX3010513readRegister8Ehh>

000b436e <_ZN8MAX301055checkEv>:
{
   b436e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4372:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   b4374:	f7ff fff7 	bl	b4366 <_ZN8MAX3010514getReadPointerEv>
   b4378:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   b437a:	4620      	mov	r0, r4
   b437c:	f7ff ffef 	bl	b435e <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4380:	4285      	cmp	r5, r0
   b4382:	f000 808e 	beq.w	b44a2 <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4386:	1b45      	subs	r5, r0, r5
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b4388:	f04f 0157 	mov.w	r1, #87	; 0x57
   b438c:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b438e:	7966      	ldrb	r6, [r4, #5]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4390:	bf48      	it	mi
   b4392:	3520      	addmi	r5, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b4394:	f001 f85c 	bl	b5450 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   b4398:	6820      	ldr	r0, [r4, #0]
   b439a:	6803      	ldr	r3, [r0, #0]
   b439c:	2107      	movs	r1, #7
   b439e:	689b      	ldr	r3, [r3, #8]
   b43a0:	4798      	blx	r3
    _i2cPort->endTransmission();
   b43a2:	6820      	ldr	r0, [r4, #0]
   b43a4:	f001 f85b 	bl	b545e <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b43a8:	436e      	muls	r6, r5
   b43aa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b43ae:	f04f 0820 	mov.w	r8, #32
        temp[3] = 0;
   b43b2:	f04f 0900 	mov.w	r9, #0
    while (bytesLeftToRead > 0)
   b43b6:	2e00      	cmp	r6, #0
   b43b8:	dd74      	ble.n	b44a4 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
   b43ba:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b43bc:	bfc8      	it	gt
   b43be:	7962      	ldrbgt	r2, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b43c0:	6820      	ldr	r0, [r4, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b43c2:	bfc9      	itett	gt
   b43c4:	eb02 0242 	addgt.w	r2, r2, r2, lsl #1
   b43c8:	4637      	movle	r7, r6
   b43ca:	fbb8 f7f2 	udivgt	r7, r8, r2
   b43ce:	4357      	mulgt	r7, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b43d0:	463a      	mov	r2, r7
   b43d2:	2157      	movs	r1, #87	; 0x57
      bytesLeftToRead -= toGet;
   b43d4:	1bf6      	subs	r6, r6, r7
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b43d6:	f001 f834 	bl	b5442 <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
   b43da:	2f00      	cmp	r7, #0
   b43dc:	ddeb      	ble.n	b43b6 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b43de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b43e2:	6820      	ldr	r0, [r4, #0]
        temp[3] = 0;
   b43e4:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b43e8:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b43ea:	f003 0303 	and.w	r3, r3, #3
   b43ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b43f2:	6803      	ldr	r3, [r0, #0]
   b43f4:	695b      	ldr	r3, [r3, #20]
   b43f6:	4798      	blx	r3
   b43f8:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   b43fc:	6820      	ldr	r0, [r4, #0]
   b43fe:	6803      	ldr	r3, [r0, #0]
   b4400:	695b      	ldr	r3, [r3, #20]
   b4402:	4798      	blx	r3
   b4404:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   b4408:	6820      	ldr	r0, [r4, #0]
   b440a:	6803      	ldr	r3, [r0, #0]
   b440c:	695b      	ldr	r3, [r3, #20]
   b440e:	4798      	blx	r3
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4410:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[0] = _i2cPort->read();
   b4414:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4418:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b441a:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b441c:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4420:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
   b4424:	7963      	ldrb	r3, [r4, #5]
   b4426:	2b01      	cmp	r3, #1
   b4428:	d919      	bls.n	b445e <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
   b442a:	6820      	ldr	r0, [r4, #0]
   b442c:	6803      	ldr	r3, [r0, #0]
   b442e:	695b      	ldr	r3, [r3, #20]
   b4430:	4798      	blx	r3
   b4432:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b4436:	6820      	ldr	r0, [r4, #0]
   b4438:	6803      	ldr	r3, [r0, #0]
   b443a:	695b      	ldr	r3, [r3, #20]
   b443c:	4798      	blx	r3
   b443e:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b4442:	6820      	ldr	r0, [r4, #0]
   b4444:	6803      	ldr	r3, [r0, #0]
   b4446:	695b      	ldr	r3, [r3, #20]
   b4448:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b444a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b444e:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4452:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b4454:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4456:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b445a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
   b445e:	7963      	ldrb	r3, [r4, #5]
   b4460:	2b02      	cmp	r3, #2
   b4462:	d919      	bls.n	b4498 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
   b4464:	6820      	ldr	r0, [r4, #0]
   b4466:	6803      	ldr	r3, [r0, #0]
   b4468:	695b      	ldr	r3, [r3, #20]
   b446a:	4798      	blx	r3
   b446c:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b4470:	6820      	ldr	r0, [r4, #0]
   b4472:	6803      	ldr	r3, [r0, #0]
   b4474:	695b      	ldr	r3, [r3, #20]
   b4476:	4798      	blx	r3
   b4478:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b447c:	6820      	ldr	r0, [r4, #0]
   b447e:	6803      	ldr	r3, [r0, #0]
   b4480:	695b      	ldr	r3, [r3, #20]
   b4482:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b4484:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b4488:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b448c:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b448e:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4490:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b4494:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4498:	7963      	ldrb	r3, [r4, #5]
   b449a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b449e:	441f      	add	r7, r3
      while (toGet > 0)
   b44a0:	e79b      	b.n	b43da <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
   b44a2:	2500      	movs	r5, #0
}
   b44a4:	b2a8      	uxth	r0, r5
   b44a6:	b003      	add	sp, #12
   b44a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b44ac <_ZN8MAX301059safeCheckEh>:
{
   b44ac:	b570      	push	{r4, r5, r6, lr}
   b44ae:	4605      	mov	r5, r0
   b44b0:	460e      	mov	r6, r1
   b44b2:	f000 fa51 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
   b44b6:	4604      	mov	r4, r0
   b44b8:	f000 fa4e 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b44bc:	1b00      	subs	r0, r0, r4
   b44be:	42b0      	cmp	r0, r6
   b44c0:	d808      	bhi.n	b44d4 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b44c2:	4628      	mov	r0, r5
   b44c4:	f7ff ff53 	bl	b436e <_ZN8MAX301055checkEv>
   b44c8:	2801      	cmp	r0, #1
   b44ca:	d004      	beq.n	b44d6 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b44cc:	2001      	movs	r0, #1
   b44ce:	f000 fc0f 	bl	b4cf0 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b44d2:	e7f1      	b.n	b44b8 <_ZN8MAX301059safeCheckEh+0xc>
   b44d4:	2000      	movs	r0, #0
}
   b44d6:	bd70      	pop	{r4, r5, r6, pc}

000b44d8 <_ZN8MAX301055getIREv>:
{
   b44d8:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b44da:	21fa      	movs	r1, #250	; 0xfa
{
   b44dc:	4604      	mov	r4, r0
  if(safeCheck(250))
   b44de:	f7ff ffe5 	bl	b44ac <_ZN8MAX301059safeCheckEh>
   b44e2:	b120      	cbz	r0, b44ee <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b44e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b44e8:	3306      	adds	r3, #6
   b44ea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b44ee:	bd10      	pop	{r4, pc}

000b44f0 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   b44f0:	7901      	ldrb	r1, [r0, #4]
   b44f2:	22ff      	movs	r2, #255	; 0xff
   b44f4:	f7ff bf13 	b.w	b431e <_ZN8MAX3010513readRegister8Ehh>

000b44f8 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b44f8:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b44fa:	22fe      	movs	r2, #254	; 0xfe
   b44fc:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   b44fe:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b4500:	f7ff ff0d 	bl	b431e <_ZN8MAX3010513readRegister8Ehh>
   b4504:	71a0      	strb	r0, [r4, #6]
}
   b4506:	bd10      	pop	{r4, pc}

000b4508 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4508:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b450a:	4604      	mov	r4, r0
   b450c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b450e:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4510:	461d      	mov	r5, r3
   b4512:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   b4514:	f000 ff66 	bl	b53e4 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4518:	9901      	ldr	r1, [sp, #4]
   b451a:	6820      	ldr	r0, [r4, #0]
   b451c:	f000 ff5e 	bl	b53dc <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   b4520:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   b4522:	4620      	mov	r0, r4
   b4524:	f7ff ffe4 	bl	b44f0 <_ZN8MAX3010510readPartIDEv>
   b4528:	2815      	cmp	r0, #21
   b452a:	d105      	bne.n	b4538 <_ZN8MAX301055beginER7TwoWiremh+0x30>
  readRevisionID();
   b452c:	4620      	mov	r0, r4
   b452e:	f7ff ffe3 	bl	b44f8 <_ZN8MAX3010514readRevisionIDEv>
  return true;
   b4532:	2001      	movs	r0, #1
}
   b4534:	b003      	add	sp, #12
   b4536:	bd30      	pop	{r4, r5, pc}
    return false;
   b4538:	2000      	movs	r0, #0
   b453a:	e7fb      	b.n	b4534 <_ZN8MAX301055beginER7TwoWiremh+0x2c>

000b453c <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b453c:	b570      	push	{r4, r5, r6, lr}
   b453e:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b4540:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b4542:	4616      	mov	r6, r2
   b4544:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   b4546:	f000 ff7f 	bl	b5448 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b454a:	6820      	ldr	r0, [r4, #0]
   b454c:	6803      	ldr	r3, [r0, #0]
   b454e:	4631      	mov	r1, r6
   b4550:	689b      	ldr	r3, [r3, #8]
   b4552:	4798      	blx	r3
  _i2cPort->write(value);
   b4554:	6820      	ldr	r0, [r4, #0]
   b4556:	6803      	ldr	r3, [r0, #0]
   b4558:	4629      	mov	r1, r5
   b455a:	689b      	ldr	r3, [r3, #8]
   b455c:	4798      	blx	r3
  _i2cPort->endTransmission();
   b455e:	6820      	ldr	r0, [r4, #0]
}
   b4560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   b4564:	f000 bf7b 	b.w	b545e <_ZN7TwoWire15endTransmissionEv>

000b4568 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b4568:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   b456a:	220c      	movs	r2, #12
   b456c:	7901      	ldrb	r1, [r0, #4]
   b456e:	f7ff bfe5 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b4572 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4572:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   b4574:	220d      	movs	r2, #13
   b4576:	7901      	ldrb	r1, [r0, #4]
   b4578:	f7ff bfe0 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b457c <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b457c:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   b457e:	220e      	movs	r2, #14
   b4580:	7901      	ldrb	r1, [r0, #4]
   b4582:	f7ff bfdb 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b4586 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b4586:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   b4588:	2210      	movs	r2, #16
   b458a:	7901      	ldrb	r1, [r0, #4]
   b458c:	f7ff bfd6 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b4590 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4590:	b510      	push	{r4, lr}
   b4592:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   b4594:	7901      	ldrb	r1, [r0, #4]
   b4596:	2300      	movs	r3, #0
   b4598:	2204      	movs	r2, #4
   b459a:	f7ff ffcf 	bl	b453c <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   b459e:	7921      	ldrb	r1, [r4, #4]
   b45a0:	4620      	mov	r0, r4
   b45a2:	2300      	movs	r3, #0
   b45a4:	2205      	movs	r2, #5
   b45a6:	f7ff ffc9 	bl	b453c <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b45aa:	7921      	ldrb	r1, [r4, #4]
   b45ac:	4620      	mov	r0, r4
   b45ae:	2300      	movs	r3, #0
}
   b45b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b45b4:	2206      	movs	r2, #6
   b45b6:	f7ff bfc1 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b45ba <_ZN8MAX301057bitMaskEhhh>:
{
   b45ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b45be:	460d      	mov	r5, r1
   b45c0:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b45c2:	460a      	mov	r2, r1
   b45c4:	7901      	ldrb	r1, [r0, #4]
{
   b45c6:	4604      	mov	r4, r0
   b45c8:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b45ca:	f7ff fea8 	bl	b431e <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b45ce:	4038      	ands	r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b45d0:	ea46 0300 	orr.w	r3, r6, r0
   b45d4:	7921      	ldrb	r1, [r4, #4]
   b45d6:	462a      	mov	r2, r5
   b45d8:	4620      	mov	r0, r4
}
   b45da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b45de:	f7ff bfad 	b.w	b453c <_ZN8MAX3010514writeRegister8Ehhh>

000b45e2 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b45e2:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b45e4:	22bf      	movs	r2, #191	; 0xbf
   b45e6:	2340      	movs	r3, #64	; 0x40
   b45e8:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b45ea:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b45ec:	f7ff ffe5 	bl	b45ba <_ZN8MAX301057bitMaskEhhh>
   b45f0:	f000 f9b2 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
   b45f4:	4605      	mov	r5, r0
   b45f6:	f000 f9af 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b45fa:	1b40      	subs	r0, r0, r5
   b45fc:	2863      	cmp	r0, #99	; 0x63
   b45fe:	d80a      	bhi.n	b4616 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   b4600:	7921      	ldrb	r1, [r4, #4]
   b4602:	2209      	movs	r2, #9
   b4604:	4620      	mov	r0, r4
   b4606:	f7ff fe8a 	bl	b431e <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b460a:	0643      	lsls	r3, r0, #25
   b460c:	d503      	bpl.n	b4616 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b460e:	2001      	movs	r0, #1
   b4610:	f000 fb6e 	bl	b4cf0 <delay>
  while (millis() - startTime < 100)
   b4614:	e7ef      	b.n	b45f6 <_ZN8MAX301059softResetEv+0x14>
}
   b4616:	bd38      	pop	{r3, r4, r5, pc}

000b4618 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4618:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b461a:	22f8      	movs	r2, #248	; 0xf8
   b461c:	2109      	movs	r1, #9
   b461e:	f7ff bfcc 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b4622 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b4622:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b4624:	229f      	movs	r2, #159	; 0x9f
   b4626:	210a      	movs	r1, #10
   b4628:	f7ff bfc7 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b462c <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b462c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b462e:	22e3      	movs	r2, #227	; 0xe3
   b4630:	210a      	movs	r1, #10
   b4632:	f7ff bfc2 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b4636 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b4636:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4638:	22fc      	movs	r2, #252	; 0xfc
   b463a:	210a      	movs	r1, #10
   b463c:	f7ff bfbd 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b4640 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4640:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4642:	4613      	mov	r3, r2
   b4644:	2903      	cmp	r1, #3
   b4646:	d814      	bhi.n	b4672 <_ZN8MAX3010510enableSlotEhh+0x32>
   b4648:	e8df f001 	tbb	[pc, r1]
   b464c:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4650:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4652:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4654:	f7ff bfb1 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4658:	011b      	lsls	r3, r3, #4
   b465a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b465e:	228f      	movs	r2, #143	; 0x8f
   b4660:	e7f7      	b.n	b4652 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4662:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4664:	2112      	movs	r1, #18
   b4666:	e7f5      	b.n	b4654 <_ZN8MAX3010510enableSlotEhh+0x14>
   b4668:	011b      	lsls	r3, r3, #4
   b466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b466e:	228f      	movs	r2, #143	; 0x8f
   b4670:	e7f8      	b.n	b4664 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4672:	4770      	bx	lr

000b4674 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4674:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b4676:	221f      	movs	r2, #31
   b4678:	2108      	movs	r1, #8
   b467a:	f7ff bf9e 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b467e <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b467e:	2310      	movs	r3, #16
   b4680:	22ef      	movs	r2, #239	; 0xef
   b4682:	2108      	movs	r1, #8
   b4684:	f7ff bf99 	b.w	b45ba <_ZN8MAX301057bitMaskEhhh>

000b4688 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b468c:	4615      	mov	r5, r2
   b468e:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4692:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b4696:	4604      	mov	r4, r0
   b4698:	4688      	mov	r8, r1
   b469a:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b469c:	f7ff ffa1 	bl	b45e2 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b46a0:	2d01      	cmp	r5, #1
   b46a2:	d149      	bne.n	b4738 <_ZN8MAX301055setupEhhhiii+0xb0>
   b46a4:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b46a6:	4620      	mov	r0, r4
   b46a8:	f7ff ffe4 	bl	b4674 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b46ac:	4620      	mov	r0, r4
   b46ae:	f7ff ffe6 	bl	b467e <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b46b2:	2e03      	cmp	r6, #3
   b46b4:	d154      	bne.n	b4760 <_ZN8MAX301055setupEhhhiii+0xd8>
   b46b6:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b46b8:	4620      	mov	r0, r4
   b46ba:	f7ff ffad 	bl	b4618 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b46be:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b46c2:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b46c4:	da51      	bge.n	b476a <_ZN8MAX301055setupEhhhiii+0xe2>
   b46c6:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b46c8:	4620      	mov	r0, r4
   b46ca:	f7ff ffaa 	bl	b4622 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b46ce:	2f63      	cmp	r7, #99	; 0x63
   b46d0:	dc58      	bgt.n	b4784 <_ZN8MAX301055setupEhhhiii+0xfc>
   b46d2:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b46d4:	4620      	mov	r0, r4
   b46d6:	f7ff ffa9 	bl	b462c <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b46da:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b46de:	dc71      	bgt.n	b47c4 <_ZN8MAX301055setupEhhhiii+0x13c>
   b46e0:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b46e2:	4620      	mov	r0, r4
   b46e4:	f7ff ffa7 	bl	b4636 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b46e8:	4641      	mov	r1, r8
   b46ea:	4620      	mov	r0, r4
   b46ec:	f7ff ff3c 	bl	b4568 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b46f0:	4641      	mov	r1, r8
   b46f2:	4620      	mov	r0, r4
   b46f4:	f7ff ff3d 	bl	b4572 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b46f8:	4641      	mov	r1, r8
   b46fa:	4620      	mov	r0, r4
   b46fc:	f7ff ff3e 	bl	b457c <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4700:	4641      	mov	r1, r8
   b4702:	4620      	mov	r0, r4
   b4704:	f7ff ff3f 	bl	b4586 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4708:	2201      	movs	r2, #1
   b470a:	4611      	mov	r1, r2
   b470c:	4620      	mov	r0, r4
   b470e:	f7ff ff97 	bl	b4640 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b4712:	2e01      	cmp	r6, #1
   b4714:	d90b      	bls.n	b472e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4716:	2202      	movs	r2, #2
   b4718:	4611      	mov	r1, r2
   b471a:	4620      	mov	r0, r4
   b471c:	f7ff ff90 	bl	b4640 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4720:	2e02      	cmp	r6, #2
   b4722:	d004      	beq.n	b472e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4724:	2203      	movs	r2, #3
   b4726:	4611      	mov	r1, r2
   b4728:	4620      	mov	r0, r4
   b472a:	f7ff ff89 	bl	b4640 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b472e:	4620      	mov	r0, r4
}
   b4730:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4734:	f7ff bf2c 	b.w	b4590 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4738:	2d02      	cmp	r5, #2
   b473a:	d101      	bne.n	b4740 <_ZN8MAX301055setupEhhhiii+0xb8>
   b473c:	2120      	movs	r1, #32
   b473e:	e7b2      	b.n	b46a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4740:	2d04      	cmp	r5, #4
   b4742:	d101      	bne.n	b4748 <_ZN8MAX301055setupEhhhiii+0xc0>
   b4744:	2140      	movs	r1, #64	; 0x40
   b4746:	e7ae      	b.n	b46a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4748:	2d08      	cmp	r5, #8
   b474a:	d101      	bne.n	b4750 <_ZN8MAX301055setupEhhhiii+0xc8>
   b474c:	2160      	movs	r1, #96	; 0x60
   b474e:	e7aa      	b.n	b46a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4750:	2d10      	cmp	r5, #16
   b4752:	d101      	bne.n	b4758 <_ZN8MAX301055setupEhhhiii+0xd0>
   b4754:	2180      	movs	r1, #128	; 0x80
   b4756:	e7a6      	b.n	b46a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4758:	2d20      	cmp	r5, #32
   b475a:	d1f3      	bne.n	b4744 <_ZN8MAX301055setupEhhhiii+0xbc>
   b475c:	21a0      	movs	r1, #160	; 0xa0
   b475e:	e7a2      	b.n	b46a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4760:	2e02      	cmp	r6, #2
   b4762:	bf0c      	ite	eq
   b4764:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4766:	2102      	movne	r1, #2
   b4768:	e7a6      	b.n	b46b8 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b476a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b476e:	da01      	bge.n	b4774 <_ZN8MAX301055setupEhhhiii+0xec>
   b4770:	2120      	movs	r1, #32
   b4772:	e7a9      	b.n	b46c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4774:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4778:	da01      	bge.n	b477e <_ZN8MAX301055setupEhhhiii+0xf6>
   b477a:	2140      	movs	r1, #64	; 0x40
   b477c:	e7a4      	b.n	b46c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b477e:	d1a2      	bne.n	b46c6 <_ZN8MAX301055setupEhhhiii+0x3e>
   b4780:	2160      	movs	r1, #96	; 0x60
   b4782:	e7a1      	b.n	b46c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4784:	2fc7      	cmp	r7, #199	; 0xc7
   b4786:	dc01      	bgt.n	b478c <_ZN8MAX301055setupEhhhiii+0x104>
   b4788:	2104      	movs	r1, #4
   b478a:	e7a3      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b478c:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4790:	da01      	bge.n	b4796 <_ZN8MAX301055setupEhhhiii+0x10e>
   b4792:	2108      	movs	r1, #8
   b4794:	e79e      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b4796:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b479a:	da01      	bge.n	b47a0 <_ZN8MAX301055setupEhhhiii+0x118>
   b479c:	210c      	movs	r1, #12
   b479e:	e799      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b47a0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b47a4:	da01      	bge.n	b47aa <_ZN8MAX301055setupEhhhiii+0x122>
   b47a6:	2110      	movs	r1, #16
   b47a8:	e794      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b47aa:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b47ae:	da01      	bge.n	b47b4 <_ZN8MAX301055setupEhhhiii+0x12c>
   b47b0:	2114      	movs	r1, #20
   b47b2:	e78f      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b47b4:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b47b8:	da01      	bge.n	b47be <_ZN8MAX301055setupEhhhiii+0x136>
   b47ba:	2118      	movs	r1, #24
   b47bc:	e78a      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b47be:	d188      	bne.n	b46d2 <_ZN8MAX301055setupEhhhiii+0x4a>
   b47c0:	211c      	movs	r1, #28
   b47c2:	e787      	b.n	b46d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b47c4:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b47c8:	dc01      	bgt.n	b47ce <_ZN8MAX301055setupEhhhiii+0x146>
   b47ca:	2101      	movs	r1, #1
   b47cc:	e789      	b.n	b46e2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b47ce:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b47d2:	dc01      	bgt.n	b47d8 <_ZN8MAX301055setupEhhhiii+0x150>
   b47d4:	2102      	movs	r1, #2
   b47d6:	e784      	b.n	b46e2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b47d8:	f240 139b 	movw	r3, #411	; 0x19b
   b47dc:	4599      	cmp	r9, r3
   b47de:	f47f af7f 	bne.w	b46e0 <_ZN8MAX301055setupEhhhiii+0x58>
   b47e2:	2103      	movs	r1, #3
   b47e4:	e77d      	b.n	b46e2 <_ZN8MAX301055setupEhhhiii+0x5a>

000b47e6 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
   b47e6:	6803      	ldr	r3, [r0, #0]
   b47e8:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
   b47ec:	eb03 1321 	add.w	r3, r3, r1, asr #4
   b47f0:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
   b47f2:	f343 30cf 	sbfx	r0, r3, #15, #16
   b47f6:	4770      	bx	lr

000b47f8 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
   b47f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  cbuf[offset] = din;
   b47fa:	4e15      	ldr	r6, [pc, #84]	; (b4850 <_Z16lowPassFIRFilters+0x58>)
   b47fc:	4915      	ldr	r1, [pc, #84]	; (b4854 <_Z16lowPassFIRFilters+0x5c>)
   b47fe:	7833      	ldrb	r3, [r6, #0]
   b4800:	4f15      	ldr	r7, [pc, #84]	; (b4858 <_Z16lowPassFIRFilters+0x60>)
   b4802:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
   b4806:	f1a3 020b 	sub.w	r2, r3, #11
   b480a:	f002 021f 	and.w	r2, r2, #31
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   b480e:	f1a3 0e16 	sub.w	lr, r3, #22
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
   b4812:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
   b4816:	2200      	movs	r2, #0
   b4818:	0300      	lsls	r0, r0, #12
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   b481a:	eb0e 0402 	add.w	r4, lr, r2
   b481e:	1a9d      	subs	r5, r3, r2
   b4820:	f004 041f 	and.w	r4, r4, #31
   b4824:	f005 051f 	and.w	r5, r5, #31
   b4828:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   b482c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   b4830:	f837 cb02 	ldrh.w	ip, [r7], #2
  for (uint8_t i = 0 ; i < 11 ; i++)
   b4834:	3201      	adds	r2, #1
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   b4836:	442c      	add	r4, r5
  for (uint8_t i = 0 ; i < 11 ; i++)
   b4838:	2a0b      	cmp	r2, #11
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
   b483a:	fb1c 0004 	smlabb	r0, ip, r4, r0
  for (uint8_t i = 0 ; i < 11 ; i++)
   b483e:	d1ec      	bne.n	b481a <_Z16lowPassFIRFilters+0x22>
  offset++;
   b4840:	3301      	adds	r3, #1
  offset %= 32; //Wrap condition
   b4842:	f003 031f 	and.w	r3, r3, #31
   b4846:	7033      	strb	r3, [r6, #0]
}
   b4848:	f340 30cf 	sbfx	r0, r0, #15, #16
   b484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b484e:	bf00      	nop
   b4850:	2003e6be 	.word	0x2003e6be
   b4854:	2003e678 	.word	0x2003e678
   b4858:	000b6fd8 	.word	0x000b6fd8

000b485c <_Z12checkForBeatl>:
{
   b485c:	b538      	push	{r3, r4, r5, lr}
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
   b485e:	4d2c      	ldr	r5, [pc, #176]	; (b4910 <_Z12checkForBeatl+0xb4>)
   b4860:	4c2c      	ldr	r4, [pc, #176]	; (b4914 <_Z12checkForBeatl+0xb8>)
   b4862:	882b      	ldrh	r3, [r5, #0]
   b4864:	8023      	strh	r3, [r4, #0]
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
   b4866:	b282      	uxth	r2, r0
   b4868:	4611      	mov	r1, r2
   b486a:	482b      	ldr	r0, [pc, #172]	; (b4918 <_Z12checkForBeatl+0xbc>)
   b486c:	f7ff ffbb 	bl	b47e6 <_Z18averageDCEstimatorPlt>
   b4870:	4b2a      	ldr	r3, [pc, #168]	; (b491c <_Z12checkForBeatl+0xc0>)
   b4872:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   b4874:	1a10      	subs	r0, r2, r0
   b4876:	b200      	sxth	r0, r0
   b4878:	f7ff ffbe 	bl	b47f8 <_Z16lowPassFIRFilters>
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   b487c:	8823      	ldrh	r3, [r4, #0]
   b487e:	f9b4 1000 	ldrsh.w	r1, [r4]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   b4882:	8028      	strh	r0, [r5, #0]
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   b4884:	ea23 0300 	bic.w	r3, r3, r0
   b4888:	0bdb      	lsrs	r3, r3, #15
   b488a:	4c25      	ldr	r4, [pc, #148]	; (b4920 <_Z12checkForBeatl+0xc4>)
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
   b488c:	4602      	mov	r2, r0
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
   b488e:	d01a      	beq.n	b48c6 <_Z12checkForBeatl+0x6a>
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
   b4890:	4b24      	ldr	r3, [pc, #144]	; (b4924 <_Z12checkForBeatl+0xc8>)
   b4892:	4925      	ldr	r1, [pc, #148]	; (b4928 <_Z12checkForBeatl+0xcc>)
   b4894:	f9b3 3000 	ldrsh.w	r3, [r3]
   b4898:	800b      	strh	r3, [r1, #0]
    IR_AC_Min = IR_AC_Signal_min;
   b489a:	4924      	ldr	r1, [pc, #144]	; (b492c <_Z12checkForBeatl+0xd0>)
   b489c:	f9b1 0000 	ldrsh.w	r0, [r1]
   b48a0:	4923      	ldr	r1, [pc, #140]	; (b4930 <_Z12checkForBeatl+0xd4>)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   b48a2:	1a1b      	subs	r3, r3, r0
    IR_AC_Min = IR_AC_Signal_min;
   b48a4:	8008      	strh	r0, [r1, #0]
    positiveEdge = 1;
   b48a6:	2101      	movs	r1, #1
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   b48a8:	f240 30d2 	movw	r0, #978	; 0x3d2
    positiveEdge = 1;
   b48ac:	8021      	strh	r1, [r4, #0]
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   b48ae:	3b15      	subs	r3, #21
    negativeEdge = 0;
   b48b0:	4920      	ldr	r1, [pc, #128]	; (b4934 <_Z12checkForBeatl+0xd8>)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   b48b2:	4283      	cmp	r3, r0
    negativeEdge = 0;
   b48b4:	f04f 0400 	mov.w	r4, #0
   b48b8:	800c      	strh	r4, [r1, #0]
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
   b48ba:	bf8c      	ite	hi
   b48bc:	2000      	movhi	r0, #0
   b48be:	2001      	movls	r0, #1
    IR_AC_Signal_max = IR_AC_Signal_Current;
   b48c0:	4b18      	ldr	r3, [pc, #96]	; (b4924 <_Z12checkForBeatl+0xc8>)
   b48c2:	801a      	strh	r2, [r3, #0]
}
   b48c4:	bd38      	pop	{r3, r4, r5, pc}
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
   b48c6:	2900      	cmp	r1, #0
   b48c8:	bfcc      	ite	gt
   b48ca:	2001      	movgt	r0, #1
   b48cc:	2000      	movle	r0, #0
   b48ce:	2a00      	cmp	r2, #0
   b48d0:	bfc8      	it	gt
   b48d2:	2000      	movgt	r0, #0
   b48d4:	b138      	cbz	r0, b48e6 <_Z12checkForBeatl+0x8a>
    positiveEdge = 0;
   b48d6:	8023      	strh	r3, [r4, #0]
    negativeEdge = 1;
   b48d8:	4b16      	ldr	r3, [pc, #88]	; (b4934 <_Z12checkForBeatl+0xd8>)
   b48da:	2101      	movs	r1, #1
   b48dc:	8019      	strh	r1, [r3, #0]
    IR_AC_Signal_min = IR_AC_Signal_Current;
   b48de:	4b13      	ldr	r3, [pc, #76]	; (b492c <_Z12checkForBeatl+0xd0>)
   b48e0:	2000      	movs	r0, #0
   b48e2:	801a      	strh	r2, [r3, #0]
   b48e4:	e7ee      	b.n	b48c4 <_Z12checkForBeatl+0x68>
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
   b48e6:	f9b4 3000 	ldrsh.w	r3, [r4]
   b48ea:	428a      	cmp	r2, r1
   b48ec:	bfd4      	ite	le
   b48ee:	2300      	movle	r3, #0
   b48f0:	f003 0301 	andgt.w	r3, r3, #1
   b48f4:	2b00      	cmp	r3, #0
   b48f6:	d1e3      	bne.n	b48c0 <_Z12checkForBeatl+0x64>
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
   b48f8:	4b0e      	ldr	r3, [pc, #56]	; (b4934 <_Z12checkForBeatl+0xd8>)
   b48fa:	f9b3 3000 	ldrsh.w	r3, [r3]
   b48fe:	428a      	cmp	r2, r1
   b4900:	bfac      	ite	ge
   b4902:	2300      	movge	r3, #0
   b4904:	f003 0301 	andlt.w	r3, r3, #1
   b4908:	2b00      	cmp	r3, #0
   b490a:	d1e8      	bne.n	b48de <_Z12checkForBeatl+0x82>
   b490c:	e7da      	b.n	b48c4 <_Z12checkForBeatl+0x68>
   b490e:	bf00      	nop
   b4910:	2003e66e 	.word	0x2003e66e
   b4914:	2003e670 	.word	0x2003e670
   b4918:	2003e6b8 	.word	0x2003e6b8
   b491c:	2003e676 	.word	0x2003e676
   b4920:	2003e6c0 	.word	0x2003e6c0
   b4924:	2003e672 	.word	0x2003e672
   b4928:	2003e5a8 	.word	0x2003e5a8
   b492c:	2003e674 	.word	0x2003e674
   b4930:	2003e5aa 	.word	0x2003e5aa
   b4934:	2003e6bc 	.word	0x2003e6bc

000b4938 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <os_mutex_recursive_create+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030248 	.word	0x00030248

000b4948 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_RNG_GetRandomNumber+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	685b      	ldr	r3, [r3, #4]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030218 	.word	0x00030218

000b4958 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	695b      	ldr	r3, [r3, #20]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030218 	.word	0x00030218

000b4968 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <hal_i2c_set_speed+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	681b      	ldr	r3, [r3, #0]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030228 	.word	0x00030228

000b4978 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <hal_i2c_begin+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	68db      	ldr	r3, [r3, #12]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030228 	.word	0x00030228

000b4988 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <hal_i2c_begin_transmission+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	699b      	ldr	r3, [r3, #24]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030228 	.word	0x00030228

000b4998 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <hal_i2c_end_transmission+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	69db      	ldr	r3, [r3, #28]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030228 	.word	0x00030228

000b49a8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <hal_i2c_write+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6a1b      	ldr	r3, [r3, #32]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030228 	.word	0x00030228

000b49b8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <hal_i2c_available+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030228 	.word	0x00030228

000b49c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <hal_i2c_read+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030228 	.word	0x00030228

000b49d8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <hal_i2c_peek+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030228 	.word	0x00030228

000b49e8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <hal_i2c_flush+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030228 	.word	0x00030228

000b49f8 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <hal_i2c_init+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030228 	.word	0x00030228

000b4a08 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <hal_i2c_request_ex+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030228 	.word	0x00030228

000b4a18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <inet_inet_ntop+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	695b      	ldr	r3, [r3, #20]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030264 	.word	0x00030264

000b4a28 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <netdb_freeaddrinfo+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	689b      	ldr	r3, [r3, #8]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030268 	.word	0x00030268

000b4a38 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <netdb_getaddrinfo+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	68db      	ldr	r3, [r3, #12]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030268 	.word	0x00030268

000b4a48 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_usart_write+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	68db      	ldr	r3, [r3, #12]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	0003023c 	.word	0x0003023c

000b4a58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_usart_available+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	691b      	ldr	r3, [r3, #16]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	0003023c 	.word	0x0003023c

000b4a68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_read+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	695b      	ldr	r3, [r3, #20]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_peek+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	699b      	ldr	r3, [r3, #24]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_flush+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	69db      	ldr	r3, [r3, #28]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_available_data_for_write+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_usart_init_ex+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003023c 	.word	0x0003023c

000b4ab8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <HAL_USB_USART_Init+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	681b      	ldr	r3, [r3, #0]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003024c 	.word	0x0003024c

000b4ac8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <HAL_USB_USART_Begin+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	685b      	ldr	r3, [r3, #4]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003024c 	.word	0x0003024c

000b4ad8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <HAL_USB_USART_Available_Data+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	691b      	ldr	r3, [r3, #16]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003024c 	.word	0x0003024c

000b4ae8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	695b      	ldr	r3, [r3, #20]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003024c 	.word	0x0003024c

000b4af8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <HAL_USB_USART_Receive_Data+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	699b      	ldr	r3, [r3, #24]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	0003024c 	.word	0x0003024c

000b4b08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <HAL_USB_USART_Send_Data+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	69db      	ldr	r3, [r3, #28]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	0003024c 	.word	0x0003024c

000b4b18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <HAL_USB_USART_Flush_Data+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6a1b      	ldr	r3, [r3, #32]
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	0003024c 	.word	0x0003024c

000b4b28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <set_system_mode+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	685b      	ldr	r3, [r3, #4]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030220 	.word	0x00030220

000b4b38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <system_delay_ms+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	695b      	ldr	r3, [r3, #20]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030220 	.word	0x00030220

000b4b48 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <application_thread_current+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030220 	.word	0x00030220

000b4b58 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <application_thread_invoke+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030220 	.word	0x00030220

000b4b68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b03      	ldr	r3, [pc, #12]	; (b4b78 <system_ctrl_set_app_request_handler+0x10>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b72:	9301      	str	r3, [sp, #4]
   b4b74:	bd08      	pop	{r3, pc}
   b4b76:	0000      	.short	0x0000
   b4b78:	00030220 	.word	0x00030220

000b4b7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b03      	ldr	r3, [pc, #12]	; (b4b8c <system_ctrl_set_result+0x10>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b86:	9301      	str	r3, [sp, #4]
   b4b88:	bd08      	pop	{r3, pc}
   b4b8a:	0000      	.short	0x0000
   b4b8c:	00030220 	.word	0x00030220

000b4b90 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <spark_cloud_flag_connected+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030244 	.word	0x00030244

000b4ba0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <spark_send_event+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	6a1b      	ldr	r3, [r3, #32]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030244 	.word	0x00030244

000b4bb0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030244 	.word	0x00030244

000b4bc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <network_connect+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	685b      	ldr	r3, [r3, #4]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030240 	.word	0x00030240

000b4bd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <network_connecting+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	689b      	ldr	r3, [r3, #8]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030240 	.word	0x00030240

000b4be0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <network_disconnect+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	68db      	ldr	r3, [r3, #12]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030240 	.word	0x00030240

000b4bf0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <network_ready+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	691b      	ldr	r3, [r3, #16]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030240 	.word	0x00030240

000b4c00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <network_on+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	695b      	ldr	r3, [r3, #20]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030240 	.word	0x00030240

000b4c10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <network_off+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	699b      	ldr	r3, [r3, #24]
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030240 	.word	0x00030240

000b4c20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <network_listen+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	69db      	ldr	r3, [r3, #28]
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030240 	.word	0x00030240

000b4c30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <network_listening+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6a1b      	ldr	r3, [r3, #32]
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030240 	.word	0x00030240

000b4c40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <network_set_listen_timeout+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030240 	.word	0x00030240

000b4c50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <network_get_listen_timeout+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030240 	.word	0x00030240

000b4c60 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <network_is_on+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	00030240 	.word	0x00030240

000b4c70 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <network_is_off+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030240 	.word	0x00030240

000b4c80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <malloc+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	681b      	ldr	r3, [r3, #0]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003021c 	.word	0x0003021c

000b4c90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <free+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	685b      	ldr	r3, [r3, #4]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003021c 	.word	0x0003021c

000b4ca0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <realloc+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	689b      	ldr	r3, [r3, #8]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003021c 	.word	0x0003021c

000b4cb0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <abort+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	0003021c 	.word	0x0003021c

000b4cc0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <_malloc_r+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	0003021c 	.word	0x0003021c

000b4cd0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <__assert_func+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003021c 	.word	0x0003021c

000b4ce0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <newlib_impure_ptr_callback+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	0003021c 	.word	0x0003021c

000b4cf0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4cf0:	2100      	movs	r1, #0
   b4cf2:	f7ff bf21 	b.w	b4b38 <system_delay_ms>

000b4cf6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4cf6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4cf8:	6883      	ldr	r3, [r0, #8]
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	b90b      	cbnz	r3, b4d02 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4cfe:	f001 f987 	bl	b6010 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4d02:	68c3      	ldr	r3, [r0, #12]
   b4d04:	4798      	blx	r3
      if (_M_manager)
   b4d06:	68a3      	ldr	r3, [r4, #8]
   b4d08:	b11b      	cbz	r3, b4d12 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d0a:	2203      	movs	r2, #3
   b4d0c:	4621      	mov	r1, r4
   b4d0e:	4620      	mov	r0, r4
   b4d10:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4d12:	4620      	mov	r0, r4
   b4d14:	2110      	movs	r1, #16
}
   b4d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4d1a:	f7ff b9be 	b.w	b409a <_ZdlPvj>

000b4d1e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4d1e:	b510      	push	{r4, lr}
      if (_M_manager)
   b4d20:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d22:	4604      	mov	r4, r0
      if (_M_manager)
   b4d24:	b113      	cbz	r3, b4d2c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d26:	2203      	movs	r2, #3
   b4d28:	4601      	mov	r1, r0
   b4d2a:	4798      	blx	r3
    }
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	bd10      	pop	{r4, pc}

000b4d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4d30:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d32:	6843      	ldr	r3, [r0, #4]
   b4d34:	3b01      	subs	r3, #1
    {
   b4d36:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d38:	6043      	str	r3, [r0, #4]
   b4d3a:	b963      	cbnz	r3, b4d56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4d3c:	6803      	ldr	r3, [r0, #0]
   b4d3e:	689b      	ldr	r3, [r3, #8]
   b4d40:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d42:	68a3      	ldr	r3, [r4, #8]
   b4d44:	3b01      	subs	r3, #1
   b4d46:	60a3      	str	r3, [r4, #8]
   b4d48:	b92b      	cbnz	r3, b4d56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d4a:	6823      	ldr	r3, [r4, #0]
   b4d4c:	4620      	mov	r0, r4
   b4d4e:	68db      	ldr	r3, [r3, #12]
    }
   b4d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d54:	4718      	bx	r3
    }
   b4d56:	bd10      	pop	{r4, pc}

000b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4d58:	b510      	push	{r4, lr}
   b4d5a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4d5c:	6800      	ldr	r0, [r0, #0]
   b4d5e:	b108      	cbz	r0, b4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4d60:	f7ff ffe6 	bl	b4d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4d64:	4620      	mov	r0, r4
   b4d66:	bd10      	pop	{r4, pc}

000b4d68 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4d68:	b513      	push	{r0, r1, r4, lr}
   b4d6a:	460b      	mov	r3, r1
   b4d6c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d6e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4d72:	466c      	mov	r4, sp
   b4d74:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4d78:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4d7c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4d80:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4d84:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4d88:	b002      	add	sp, #8
   b4d8a:	bd10      	pop	{r4, pc}

000b4d8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d8c:	4802      	ldr	r0, [pc, #8]	; (b4d98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d8e:	2300      	movs	r3, #0
   b4d90:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d92:	f7ff bdd1 	b.w	b4938 <os_mutex_recursive_create>
   b4d96:	bf00      	nop
   b4d98:	2003e6c4 	.word	0x2003e6c4

000b4d9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4d9c:	4770      	bx	lr

000b4d9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4d9e:	2000      	movs	r0, #0
   b4da0:	4770      	bx	lr

000b4da2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4da2:	b510      	push	{r4, lr}
   b4da4:	2110      	movs	r1, #16
   b4da6:	4604      	mov	r4, r0
   b4da8:	f7ff f977 	bl	b409a <_ZdlPvj>
   b4dac:	4620      	mov	r0, r4
   b4dae:	bd10      	pop	{r4, pc}

000b4db0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4db0:	b508      	push	{r3, lr}
      { delete this; }
   b4db2:	f7ff fff6 	bl	b4da2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4db6:	bd08      	pop	{r3, pc}

000b4db8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4db8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4dba:	2200      	movs	r2, #0
   b4dbc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4dc0:	6002      	str	r2, [r0, #0]
   b4dc2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4dc4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4dc6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4dc8:	680c      	ldr	r4, [r1, #0]
   b4dca:	8085      	strh	r5, [r0, #4]
   b4dcc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4dce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4dd0:	bd30      	pop	{r4, r5, pc}

000b4dd2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4dd2:	b510      	push	{r4, lr}
   b4dd4:	4604      	mov	r4, r0
    free((void*)msg_);
   b4dd6:	6800      	ldr	r0, [r0, #0]
   b4dd8:	f7ff ff5a 	bl	b4c90 <free>
}
   b4ddc:	4620      	mov	r0, r4
   b4dde:	bd10      	pop	{r4, pc}

000b4de0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4de0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4de2:	68c4      	ldr	r4, [r0, #12]
   b4de4:	b1f4      	cbz	r4, b4e24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4de6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4de8:	2b02      	cmp	r3, #2
   b4dea:	d103      	bne.n	b4df4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4dec:	f104 000c 	add.w	r0, r4, #12
   b4df0:	f7ff ffef 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4df4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4df6:	b135      	cbz	r5, b4e06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4df8:	4628      	mov	r0, r5
   b4dfa:	f7ff ff90 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
   b4dfe:	2110      	movs	r1, #16
   b4e00:	4628      	mov	r0, r5
   b4e02:	f7ff f94a 	bl	b409a <_ZdlPvj>
   b4e06:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4e08:	b135      	cbz	r5, b4e18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4e0a:	4628      	mov	r0, r5
   b4e0c:	f7ff ff87 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
   b4e10:	2110      	movs	r1, #16
   b4e12:	4628      	mov	r0, r5
   b4e14:	f7ff f941 	bl	b409a <_ZdlPvj>
   b4e18:	4620      	mov	r0, r4
   b4e1a:	2114      	movs	r1, #20
   b4e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4e20:	f7ff b93b 	b.w	b409a <_ZdlPvj>
   b4e24:	bd38      	pop	{r3, r4, r5, pc}

000b4e26 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e26:	680b      	ldr	r3, [r1, #0]
   b4e28:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4e2a:	684b      	ldr	r3, [r1, #4]
   b4e2c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4e2e:	b113      	cbz	r3, b4e36 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4e30:	685a      	ldr	r2, [r3, #4]
   b4e32:	3201      	adds	r2, #1
   b4e34:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e36:	4770      	bx	lr

000b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e3a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4e3c:	4668      	mov	r0, sp
   b4e3e:	460d      	mov	r5, r1
   b4e40:	f7ff fff1 	bl	b4e26 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e44:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4e46:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e48:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4e4a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4e4c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4e4e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4e50:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4e52:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4e54:	f7ff ff80 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4e58:	b135      	cbz	r5, b4e68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4e5a:	1d28      	adds	r0, r5, #4
   b4e5c:	f7ff ff7c 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e60:	2108      	movs	r1, #8
   b4e62:	4628      	mov	r0, r5
   b4e64:	f7ff f919 	bl	b409a <_ZdlPvj>
        return p;
    }
   b4e68:	4620      	mov	r0, r4
   b4e6a:	b003      	add	sp, #12
   b4e6c:	bd30      	pop	{r4, r5, pc}

000b4e6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4e6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4e70:	b510      	push	{r4, lr}
      if (_M_empty())
   b4e72:	b90a      	cbnz	r2, b4e78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4e74:	f001 f8cc 	bl	b6010 <_ZSt25__throw_bad_function_callv>
    }
   b4e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e7c:	68c3      	ldr	r3, [r0, #12]
   b4e7e:	4718      	bx	r3

000b4e80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e80:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4e82:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4e84:	f100 0110 	add.w	r1, r0, #16
   b4e88:	f7ff fff1 	bl	b4e6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4e8c:	bd08      	pop	{r3, pc}

000b4e8e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4e8e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4e90:	b510      	push	{r4, lr}
      if (_M_empty())
   b4e92:	b90a      	cbnz	r2, b4e98 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4e94:	f001 f8bc 	bl	b6010 <_ZSt25__throw_bad_function_callv>
    }
   b4e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e9c:	68c3      	ldr	r3, [r0, #12]
   b4e9e:	4718      	bx	r3

000b4ea0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ea0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4ea2:	6800      	ldr	r0, [r0, #0]
   b4ea4:	f100 0110 	add.w	r1, r0, #16
   b4ea8:	f7ff fff1 	bl	b4e8e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4eac:	bd08      	pop	{r3, pc}
	...

000b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4eb0:	b538      	push	{r3, r4, r5, lr}
   b4eb2:	2300      	movs	r3, #0
   b4eb4:	4604      	mov	r4, r0
   b4eb6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4eb8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4eba:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ebc:	f7ff f8e9 	bl	b4092 <_Znwj>
   b4ec0:	b128      	cbz	r0, b4ece <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4ec2:	2301      	movs	r3, #1
   b4ec4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4ec8:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4eca:	6003      	str	r3, [r0, #0]
   b4ecc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4ece:	6020      	str	r0, [r4, #0]
	}
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	bd38      	pop	{r3, r4, r5, pc}
   b4ed4:	000b6ff8 	.word	0x000b6ff8

000b4ed8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4ed8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4eda:	2300      	movs	r3, #0
   b4edc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4ede:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4ee0:	4604      	mov	r4, r0
   b4ee2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4ee4:	b12b      	cbz	r3, b4ef2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4ee6:	2202      	movs	r2, #2
   b4ee8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4eea:	68eb      	ldr	r3, [r5, #12]
   b4eec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4eee:	68ab      	ldr	r3, [r5, #8]
   b4ef0:	60a3      	str	r3, [r4, #8]
    }
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4efa:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4efc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4efe:	4668      	mov	r0, sp
   b4f00:	f7ff ff5a 	bl	b4db8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4f04:	f04f 0302 	mov.w	r3, #2
   b4f08:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4f0c:	2a00      	cmp	r2, #0
   b4f0e:	d103      	bne.n	b4f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4f10:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4f14:	2900      	cmp	r1, #0
   b4f16:	d1f7      	bne.n	b4f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4f18:	d125      	bne.n	b4f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4f1a:	f104 050c 	add.w	r5, r4, #12
   b4f1e:	4669      	mov	r1, sp
   b4f20:	4628      	mov	r0, r5
   b4f22:	f7ff ff49 	bl	b4db8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4f26:	f3bf 8f5b 	dmb	ish
   b4f2a:	2301      	movs	r3, #1
   b4f2c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4f2e:	2000      	movs	r0, #0
   b4f30:	f104 0308 	add.w	r3, r4, #8
   b4f34:	f3bf 8f5b 	dmb	ish
   b4f38:	e853 6f00 	ldrex	r6, [r3]
   b4f3c:	e843 0200 	strex	r2, r0, [r3]
   b4f40:	2a00      	cmp	r2, #0
   b4f42:	d1f9      	bne.n	b4f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4f44:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4f48:	b16e      	cbz	r6, b4f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4f4a:	f7ff fdfd 	bl	b4b48 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f4e:	b178      	cbz	r0, b4f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4f50:	4629      	mov	r1, r5
   b4f52:	4630      	mov	r0, r6
   b4f54:	f7ff ff8b 	bl	b4e6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4f58:	4630      	mov	r0, r6
   b4f5a:	f7ff fee0 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4f5e:	2110      	movs	r1, #16
   b4f60:	4630      	mov	r0, r6
   b4f62:	f7ff f89a 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4f66:	4668      	mov	r0, sp
   b4f68:	f7ff ff33 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
    }
   b4f6c:	b009      	add	sp, #36	; 0x24
   b4f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4f70:	4631      	mov	r1, r6
   b4f72:	a802      	add	r0, sp, #8
   b4f74:	f7ff ffb0 	bl	b4ed8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4f78:	68e0      	ldr	r0, [r4, #12]
   b4f7a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4f7e:	b108      	cbz	r0, b4f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4f80:	f001 ff38 	bl	b6df4 <strdup>
        type_(type) {
   b4f84:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4f86:	2010      	movs	r0, #16
   b4f88:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4f8c:	f7ff f881 	bl	b4092 <_Znwj>
   b4f90:	4605      	mov	r5, r0
   b4f92:	b1e8      	cbz	r0, b4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4f94:	2700      	movs	r7, #0
   b4f96:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f98:	2018      	movs	r0, #24
   b4f9a:	f7ff f87a 	bl	b4092 <_Znwj>
   b4f9e:	4604      	mov	r4, r0
   b4fa0:	b188      	cbz	r0, b4fc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4fa2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4fa4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4fa6:	a802      	add	r0, sp, #8
   b4fa8:	f7ff fede 	bl	b4d68 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4fae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4fb0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4fb2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4fb4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4fb6:	a906      	add	r1, sp, #24
   b4fb8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4fba:	60e3      	str	r3, [r4, #12]
   b4fbc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4fc0:	9205      	str	r2, [sp, #20]
   b4fc2:	f7ff fef9 	bl	b4db8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4fc6:	4b08      	ldr	r3, [pc, #32]	; (b4fe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4fc8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4fca:	4b08      	ldr	r3, [pc, #32]	; (b4fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fcc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4fce:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4fd0:	a806      	add	r0, sp, #24
   b4fd2:	f7ff fefe 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4fd6:	a802      	add	r0, sp, #8
   b4fd8:	f7ff fea1 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4fdc:	2200      	movs	r2, #0
   b4fde:	4629      	mov	r1, r5
   b4fe0:	4803      	ldr	r0, [pc, #12]	; (b4ff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4fe2:	f7ff fdb9 	bl	b4b58 <application_thread_invoke>
   b4fe6:	e7b7      	b.n	b4f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4fe8:	000b4e81 	.word	0x000b4e81
   b4fec:	000b5105 	.word	0x000b5105
   b4ff0:	000b4cf7 	.word	0x000b4cf7

000b4ff4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ff8:	b08b      	sub	sp, #44	; 0x2c
   b4ffa:	4605      	mov	r5, r0
   b4ffc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5000:	460f      	mov	r7, r1
   b5002:	4690      	mov	r8, r2
   b5004:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5006:	f7ff fdc3 	bl	b4b90 <spark_cloud_flag_connected>
   b500a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b500c:	4683      	mov	fp, r0
   b500e:	bb38      	cbnz	r0, b5060 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5010:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5014:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5016:	a905      	add	r1, sp, #20
   b5018:	4630      	mov	r0, r6
   b501a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b501e:	f7ff fecb 	bl	b4db8 <_ZN8particle5ErrorC1EOS0_>
   b5022:	2014      	movs	r0, #20
   b5024:	f7ff f835 	bl	b4092 <_Znwj>
   b5028:	4604      	mov	r4, r0
   b502a:	b148      	cbz	r0, b5040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b502c:	2302      	movs	r3, #2
   b502e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5030:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5032:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5036:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5038:	4631      	mov	r1, r6
   b503a:	300c      	adds	r0, #12
   b503c:	f7ff febc 	bl	b4db8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5040:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5042:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5044:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5048:	f7ff ff32 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b504c:	4630      	mov	r0, r6
   b504e:	f7ff fec0 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5052:	a805      	add	r0, sp, #20
   b5054:	f7ff febd 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5058:	4628      	mov	r0, r5
   b505a:	b00b      	add	sp, #44	; 0x2c
   b505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5060:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5062:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5064:	2014      	movs	r0, #20
   b5066:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b506a:	9307      	str	r3, [sp, #28]
   b506c:	f7ff f811 	bl	b4092 <_Znwj>
   b5070:	4601      	mov	r1, r0
   b5072:	b118      	cbz	r0, b507c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5074:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5078:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b507a:	7044      	strb	r4, [r0, #1]
   b507c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b507e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5080:	f7ff ff16 	bl	b4eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5084:	4b1e      	ldr	r3, [pc, #120]	; (b5100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5086:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5088:	2008      	movs	r0, #8
   b508a:	f7ff f802 	bl	b4092 <_Znwj>
   b508e:	4604      	mov	r4, r0
   b5090:	b110      	cbz	r0, b5098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5092:	a903      	add	r1, sp, #12
   b5094:	f7ff fec7 	bl	b4e26 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5098:	9600      	str	r6, [sp, #0]
   b509a:	fa5f f38a 	uxtb.w	r3, sl
   b509e:	464a      	mov	r2, r9
   b50a0:	4641      	mov	r1, r8
   b50a2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b50a4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b50a6:	f7ff fd7b 	bl	b4ba0 <spark_send_event>
   b50aa:	b9b8      	cbnz	r0, b50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b50ac:	9b03      	ldr	r3, [sp, #12]
   b50ae:	785b      	ldrb	r3, [r3, #1]
   b50b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b50b4:	b993      	cbnz	r3, b50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b50b6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b50ba:	a905      	add	r1, sp, #20
   b50bc:	a803      	add	r0, sp, #12
   b50be:	9205      	str	r2, [sp, #20]
   b50c0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b50c4:	f7ff ff18 	bl	b4ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b50c8:	a805      	add	r0, sp, #20
   b50ca:	f7ff fe82 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b50ce:	a805      	add	r0, sp, #20
   b50d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b50d2:	f7ff feb1 	bl	b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b50d6:	a806      	add	r0, sp, #24
   b50d8:	f7ff fe3e 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50dc:	a903      	add	r1, sp, #12
   b50de:	a805      	add	r0, sp, #20
   b50e0:	f7ff fea1 	bl	b4e26 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50e4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b50e6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50e8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b50ea:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b50ec:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b50ee:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b50f0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b50f2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b50f4:	f7ff fe30 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50f8:	a804      	add	r0, sp, #16
   b50fa:	f7ff fe2d 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b50fe:	e7ab      	b.n	b5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5100:	000b5181 	.word	0x000b5181

000b5104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5104:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5108:	4605      	mov	r5, r0
	switch (__op)
   b510a:	d103      	bne.n	b5114 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b510c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b510e:	6003      	str	r3, [r0, #0]
      }
   b5110:	2000      	movs	r0, #0
   b5112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5114:	2a02      	cmp	r2, #2
   b5116:	d010      	beq.n	b513a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5118:	2a03      	cmp	r2, #3
   b511a:	d1f9      	bne.n	b5110 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b511c:	6804      	ldr	r4, [r0, #0]
   b511e:	2c00      	cmp	r4, #0
   b5120:	d0f6      	beq.n	b5110 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5122:	f104 0010 	add.w	r0, r4, #16
   b5126:	f7ff fe54 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b512a:	4620      	mov	r0, r4
   b512c:	f7ff fdf7 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5130:	2118      	movs	r1, #24
   b5132:	4620      	mov	r0, r4
   b5134:	f7fe ffb1 	bl	b409a <_ZdlPvj>
   b5138:	e7ea      	b.n	b5110 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b513a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b513c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b513e:	f7fe ffa8 	bl	b4092 <_Znwj>
   b5142:	4604      	mov	r4, r0
   b5144:	b150      	cbz	r0, b515c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5146:	4631      	mov	r1, r6
   b5148:	f7ff fec6 	bl	b4ed8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b514c:	6930      	ldr	r0, [r6, #16]
   b514e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5152:	b108      	cbz	r0, b5158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5154:	f001 fe4e 	bl	b6df4 <strdup>
        type_(type) {
   b5158:	6120      	str	r0, [r4, #16]
   b515a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b515c:	602c      	str	r4, [r5, #0]
	}
   b515e:	e7d7      	b.n	b5110 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5160 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5160:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5162:	2300      	movs	r3, #0
   b5164:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5166:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5168:	4604      	mov	r4, r0
   b516a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b516c:	b12b      	cbz	r3, b517a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b516e:	2202      	movs	r2, #2
   b5170:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5172:	68eb      	ldr	r3, [r5, #12]
   b5174:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5176:	68ab      	ldr	r3, [r5, #8]
   b5178:	60a3      	str	r3, [r4, #8]
    }
   b517a:	4620      	mov	r0, r4
   b517c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5180:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5182:	b089      	sub	sp, #36	; 0x24
   b5184:	4604      	mov	r4, r0
   b5186:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5188:	a801      	add	r0, sp, #4
   b518a:	4611      	mov	r1, r2
   b518c:	f7ff fe54 	bl	b4e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5190:	b1a4      	cbz	r4, b51bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5192:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5194:	b11d      	cbz	r5, b519e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5196:	4628      	mov	r0, r5
   b5198:	f001 fe2c 	bl	b6df4 <strdup>
   b519c:	4605      	mov	r5, r0
   b519e:	a801      	add	r0, sp, #4
   b51a0:	a903      	add	r1, sp, #12
        type_(type) {
   b51a2:	9503      	str	r5, [sp, #12]
   b51a4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b51a8:	f7ff fea6 	bl	b4ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b51ac:	a803      	add	r0, sp, #12
   b51ae:	f7ff fe10 	bl	b4dd2 <_ZN8particle5ErrorD1Ev>
   b51b2:	a802      	add	r0, sp, #8
   b51b4:	f7ff fdd0 	bl	b4d58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b51b8:	b009      	add	sp, #36	; 0x24
   b51ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b51bc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b51be:	2301      	movs	r3, #1
   b51c0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b51c4:	2a00      	cmp	r2, #0
   b51c6:	d103      	bne.n	b51d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b51c8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b51cc:	2900      	cmp	r1, #0
   b51ce:	d1f7      	bne.n	b51c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b51d0:	d1ef      	bne.n	b51b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b51d2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b51d4:	f3bf 8f5b 	dmb	ish
   b51d8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b51da:	1d2b      	adds	r3, r5, #4
   b51dc:	f3bf 8f5b 	dmb	ish
   b51e0:	e853 6f00 	ldrex	r6, [r3]
   b51e4:	e843 4200 	strex	r2, r4, [r3]
   b51e8:	2a00      	cmp	r2, #0
   b51ea:	d1f9      	bne.n	b51e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b51ec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b51f0:	2e00      	cmp	r6, #0
   b51f2:	d0de      	beq.n	b51b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b51f4:	4620      	mov	r0, r4
   b51f6:	f7ff fca7 	bl	b4b48 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b51fa:	4607      	mov	r7, r0
   b51fc:	b160      	cbz	r0, b5218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b51fe:	f105 010c 	add.w	r1, r5, #12
   b5202:	4630      	mov	r0, r6
   b5204:	f7ff fe43 	bl	b4e8e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5208:	4630      	mov	r0, r6
   b520a:	f7ff fd88 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b520e:	2110      	movs	r1, #16
   b5210:	4630      	mov	r0, r6
   b5212:	f7fe ff42 	bl	b409a <_ZdlPvj>
   b5216:	e7cc      	b.n	b51b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5218:	4631      	mov	r1, r6
   b521a:	a803      	add	r0, sp, #12
   b521c:	f7ff ffa0 	bl	b5160 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5220:	7b2b      	ldrb	r3, [r5, #12]
   b5222:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5226:	2010      	movs	r0, #16
   b5228:	f7fe ff33 	bl	b4092 <_Znwj>
   b522c:	4605      	mov	r5, r0
   b522e:	b1d0      	cbz	r0, b5266 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5230:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5232:	2014      	movs	r0, #20
   b5234:	f7fe ff2d 	bl	b4092 <_Znwj>
   b5238:	4604      	mov	r4, r0
   b523a:	b178      	cbz	r0, b525c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b523c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b523e:	4601      	mov	r1, r0
   b5240:	a803      	add	r0, sp, #12
   b5242:	f7ff fd91 	bl	b4d68 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5246:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5248:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b524a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b524c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b524e:	9205      	str	r2, [sp, #20]
   b5250:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5252:	60e3      	str	r3, [r4, #12]
   b5254:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5258:	9206      	str	r2, [sp, #24]
   b525a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b525c:	4b06      	ldr	r3, [pc, #24]	; (b5278 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b525e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5260:	4b06      	ldr	r3, [pc, #24]	; (b527c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5262:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5264:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5266:	a803      	add	r0, sp, #12
   b5268:	f7ff fd59 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b526c:	2200      	movs	r2, #0
   b526e:	4629      	mov	r1, r5
   b5270:	4803      	ldr	r0, [pc, #12]	; (b5280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5272:	f7ff fc71 	bl	b4b58 <application_thread_invoke>
   b5276:	e7c7      	b.n	b5208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5278:	000b4ea1 	.word	0x000b4ea1
   b527c:	000b5285 	.word	0x000b5285
   b5280:	000b4cf7 	.word	0x000b4cf7

000b5284 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5284:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5286:	b570      	push	{r4, r5, r6, lr}
   b5288:	4604      	mov	r4, r0
	switch (__op)
   b528a:	d103      	bne.n	b5294 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b528c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b528e:	6003      	str	r3, [r0, #0]
      }
   b5290:	2000      	movs	r0, #0
   b5292:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5294:	2a02      	cmp	r2, #2
   b5296:	d00c      	beq.n	b52b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5298:	2a03      	cmp	r2, #3
   b529a:	d1f9      	bne.n	b5290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b529c:	6804      	ldr	r4, [r0, #0]
   b529e:	2c00      	cmp	r4, #0
   b52a0:	d0f6      	beq.n	b5290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b52a2:	4620      	mov	r0, r4
   b52a4:	f7ff fd3b 	bl	b4d1e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b52a8:	2114      	movs	r1, #20
   b52aa:	4620      	mov	r0, r4
   b52ac:	f7fe fef5 	bl	b409a <_ZdlPvj>
   b52b0:	e7ee      	b.n	b5290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b52b2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b52b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b52b6:	f7fe feec 	bl	b4092 <_Znwj>
   b52ba:	4605      	mov	r5, r0
   b52bc:	b120      	cbz	r0, b52c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b52be:	4631      	mov	r1, r6
   b52c0:	f7ff ff4e 	bl	b5160 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b52c4:	7c33      	ldrb	r3, [r6, #16]
   b52c6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b52c8:	6025      	str	r5, [r4, #0]
	}
   b52ca:	e7e1      	b.n	b5290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b52cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52cc:	2200      	movs	r2, #0
   b52ce:	6840      	ldr	r0, [r0, #4]
   b52d0:	4611      	mov	r1, r2
   b52d2:	f7ff bcad 	b.w	b4c30 <network_listening>

000b52d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52d6:	2200      	movs	r2, #0
   b52d8:	6840      	ldr	r0, [r0, #4]
   b52da:	4611      	mov	r1, r2
   b52dc:	f7ff bcb8 	b.w	b4c50 <network_get_listen_timeout>

000b52e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b52e0:	6840      	ldr	r0, [r0, #4]
   b52e2:	2200      	movs	r2, #0
   b52e4:	f7ff bcac 	b.w	b4c40 <network_set_listen_timeout>

000b52e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b52e8:	6840      	ldr	r0, [r0, #4]
   b52ea:	2200      	movs	r2, #0
   b52ec:	f081 0101 	eor.w	r1, r1, #1
   b52f0:	f7ff bc96 	b.w	b4c20 <network_listen>

000b52f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b52f4:	2300      	movs	r3, #0
   b52f6:	6840      	ldr	r0, [r0, #4]
   b52f8:	461a      	mov	r2, r3
   b52fa:	4619      	mov	r1, r3
   b52fc:	f7ff bc88 	b.w	b4c10 <network_off>

000b5300 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5300:	2300      	movs	r3, #0
   b5302:	6840      	ldr	r0, [r0, #4]
   b5304:	461a      	mov	r2, r3
   b5306:	4619      	mov	r1, r3
   b5308:	f7ff bc7a 	b.w	b4c00 <network_on>

000b530c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b530c:	2200      	movs	r2, #0
   b530e:	6840      	ldr	r0, [r0, #4]
   b5310:	4611      	mov	r1, r2
   b5312:	f7ff bc6d 	b.w	b4bf0 <network_ready>

000b5316 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5316:	2200      	movs	r2, #0
   b5318:	6840      	ldr	r0, [r0, #4]
   b531a:	4611      	mov	r1, r2
   b531c:	f7ff bc58 	b.w	b4bd0 <network_connecting>

000b5320 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5320:	6840      	ldr	r0, [r0, #4]
   b5322:	2200      	movs	r2, #0
   b5324:	2102      	movs	r1, #2
   b5326:	f7ff bc5b 	b.w	b4be0 <network_disconnect>

000b532a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b532a:	2300      	movs	r3, #0
   b532c:	6840      	ldr	r0, [r0, #4]
   b532e:	461a      	mov	r2, r3
   b5330:	f7ff bc46 	b.w	b4bc0 <network_connect>

000b5334 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5334:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5336:	2203      	movs	r2, #3
   b5338:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b533a:	4a02      	ldr	r2, [pc, #8]	; (b5344 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b533c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b533e:	4770      	bx	lr
   b5340:	2003e6c8 	.word	0x2003e6c8
   b5344:	000b7014 	.word	0x000b7014

000b5348 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5348:	4770      	bx	lr

000b534a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b534a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b534c:	4606      	mov	r6, r0
   b534e:	4615      	mov	r5, r2
   b5350:	460c      	mov	r4, r1
   b5352:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5354:	42bc      	cmp	r4, r7
   b5356:	d006      	beq.n	b5366 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5358:	6833      	ldr	r3, [r6, #0]
   b535a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b535e:	689b      	ldr	r3, [r3, #8]
   b5360:	4630      	mov	r0, r6
   b5362:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5364:	e7f6      	b.n	b5354 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5366:	4628      	mov	r0, r5
   b5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b536a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b536a:	7c00      	ldrb	r0, [r0, #16]
   b536c:	2200      	movs	r2, #0
   b536e:	f7ff bb1b 	b.w	b49a8 <hal_i2c_write>

000b5372 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5372:	7c00      	ldrb	r0, [r0, #16]
   b5374:	2100      	movs	r1, #0
   b5376:	f7ff bb1f 	b.w	b49b8 <hal_i2c_available>

000b537a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b537a:	7c00      	ldrb	r0, [r0, #16]
   b537c:	2100      	movs	r1, #0
   b537e:	f7ff bb23 	b.w	b49c8 <hal_i2c_read>

000b5382 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5382:	7c00      	ldrb	r0, [r0, #16]
   b5384:	2100      	movs	r1, #0
   b5386:	f7ff bb27 	b.w	b49d8 <hal_i2c_peek>

000b538a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b538a:	7c00      	ldrb	r0, [r0, #16]
   b538c:	2100      	movs	r1, #0
   b538e:	f7ff bb2b 	b.w	b49e8 <hal_i2c_flush>

000b5392 <_ZN7TwoWireD0Ev>:
   b5392:	b510      	push	{r4, lr}
   b5394:	2114      	movs	r1, #20
   b5396:	4604      	mov	r4, r0
   b5398:	f7fe fe7f 	bl	b409a <_ZdlPvj>
   b539c:	4620      	mov	r0, r4
   b539e:	bd10      	pop	{r4, pc}

000b53a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53a0:	b538      	push	{r3, r4, r5, lr}
   b53a2:	4604      	mov	r4, r0
   b53a4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b53a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53aa:	2200      	movs	r2, #0
   b53ac:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53b0:	4b09      	ldr	r3, [pc, #36]	; (b53d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b53b2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53b4:	4608      	mov	r0, r1
   b53b6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b53b8:	4629      	mov	r1, r5
   b53ba:	f7ff fb1d 	bl	b49f8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53be:	30bf      	adds	r0, #191	; 0xbf
   b53c0:	d108      	bne.n	b53d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b53c2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53c4:	07db      	lsls	r3, r3, #31
   b53c6:	d505      	bpl.n	b53d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b53c8:	6868      	ldr	r0, [r5, #4]
   b53ca:	f7ff fc61 	bl	b4c90 <free>
    free(conf.tx_buffer);
   b53ce:	68e8      	ldr	r0, [r5, #12]
   b53d0:	f7ff fc5e 	bl	b4c90 <free>
}
   b53d4:	4620      	mov	r0, r4
   b53d6:	bd38      	pop	{r3, r4, r5, pc}
   b53d8:	000b7050 	.word	0x000b7050

000b53dc <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b53dc:	7c00      	ldrb	r0, [r0, #16]
   b53de:	2200      	movs	r2, #0
   b53e0:	f7ff bac2 	b.w	b4968 <hal_i2c_set_speed>

000b53e4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b53e4:	2300      	movs	r3, #0
   b53e6:	7c00      	ldrb	r0, [r0, #16]
   b53e8:	461a      	mov	r2, r3
   b53ea:	4619      	mov	r1, r3
   b53ec:	f7ff bac4 	b.w	b4978 <hal_i2c_begin>

000b53f0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b53f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b53f2:	2200      	movs	r2, #0
   b53f4:	2314      	movs	r3, #20
   b53f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b53fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b53fe:	780b      	ldrb	r3, [r1, #0]
   b5400:	f88d 3008 	strb.w	r3, [sp, #8]
   b5404:	684b      	ldr	r3, [r1, #4]
   b5406:	9303      	str	r3, [sp, #12]
   b5408:	68cb      	ldr	r3, [r1, #12]
   b540a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b540c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b540e:	7a0b      	ldrb	r3, [r1, #8]
   b5410:	9305      	str	r3, [sp, #20]
   b5412:	a901      	add	r1, sp, #4
   b5414:	f7ff faf8 	bl	b4a08 <hal_i2c_request_ex>
}
   b5418:	b007      	add	sp, #28
   b541a:	f85d fb04 	ldr.w	pc, [sp], #4

000b541e <_ZN7TwoWire11requestFromEhjh>:
{
   b541e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5420:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5422:	f88d 1000 	strb.w	r1, [sp]
   b5426:	f04f 0164 	mov.w	r1, #100	; 0x64
   b542a:	9103      	str	r1, [sp, #12]
   b542c:	bf18      	it	ne
   b542e:	2301      	movne	r3, #1
   b5430:	4669      	mov	r1, sp
    size_ = size;
   b5432:	9201      	str	r2, [sp, #4]
   b5434:	f88d 3008 	strb.w	r3, [sp, #8]
   b5438:	f7ff ffda 	bl	b53f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b543c:	b005      	add	sp, #20
   b543e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5442 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5442:	2301      	movs	r3, #1
   b5444:	f7ff bfeb 	b.w	b541e <_ZN7TwoWire11requestFromEhjh>

000b5448 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5448:	7c00      	ldrb	r0, [r0, #16]
   b544a:	2200      	movs	r2, #0
   b544c:	f7ff ba9c 	b.w	b4988 <hal_i2c_begin_transmission>

000b5450 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5450:	b2c9      	uxtb	r1, r1
   b5452:	f7ff bff9 	b.w	b5448 <_ZN7TwoWire17beginTransmissionEh>

000b5456 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5456:	7c00      	ldrb	r0, [r0, #16]
   b5458:	2200      	movs	r2, #0
   b545a:	f7ff ba9d 	b.w	b4998 <hal_i2c_end_transmission>

000b545e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b545e:	2101      	movs	r1, #1
   b5460:	f7ff bff9 	b.w	b5456 <_ZN7TwoWire15endTransmissionEh>

000b5464 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5464:	4770      	bx	lr

000b5466 <_ZN9IPAddressD0Ev>:
   b5466:	b510      	push	{r4, lr}
   b5468:	2118      	movs	r1, #24
   b546a:	4604      	mov	r4, r0
   b546c:	f7fe fe15 	bl	b409a <_ZdlPvj>
   b5470:	4620      	mov	r0, r4
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5474:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5476:	7d03      	ldrb	r3, [r0, #20]
   b5478:	2b06      	cmp	r3, #6
{
   b547a:	b08d      	sub	sp, #52	; 0x34
   b547c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b547e:	f100 0704 	add.w	r7, r0, #4
   b5482:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5486:	d012      	beq.n	b54ae <_ZNK9IPAddress7printToER5Print+0x3a>
   b5488:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b548c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5490:	220a      	movs	r2, #10
   b5492:	4630      	mov	r0, r6
   b5494:	f000 f95d 	bl	b5752 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5498:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b549a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b549c:	d019      	beq.n	b54d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b549e:	2c00      	cmp	r4, #0
   b54a0:	d0f4      	beq.n	b548c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b54a2:	212e      	movs	r1, #46	; 0x2e
   b54a4:	4630      	mov	r0, r6
   b54a6:	f000 f93b 	bl	b5720 <_ZN5Print5printEc>
   b54aa:	4404      	add	r4, r0
   b54ac:	e7ee      	b.n	b548c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54ae:	232f      	movs	r3, #47	; 0x2f
   b54b0:	466a      	mov	r2, sp
   b54b2:	4639      	mov	r1, r7
   b54b4:	200a      	movs	r0, #10
		buf[0] = 0;
   b54b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54ba:	f7ff faad 	bl	b4a18 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b54be:	4668      	mov	r0, sp
   b54c0:	f001 fcb5 	bl	b6e2e <strlen>
   b54c4:	6833      	ldr	r3, [r6, #0]
   b54c6:	4602      	mov	r2, r0
   b54c8:	68db      	ldr	r3, [r3, #12]
   b54ca:	4669      	mov	r1, sp
   b54cc:	4630      	mov	r0, r6
   b54ce:	4798      	blx	r3
   b54d0:	4604      	mov	r4, r0
    }
    return n;
}
   b54d2:	4620      	mov	r0, r4
   b54d4:	b00d      	add	sp, #52	; 0x34
   b54d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b54d8:	b510      	push	{r4, lr}
   b54da:	4b05      	ldr	r3, [pc, #20]	; (b54f0 <_ZN9IPAddressC1Ev+0x18>)
   b54dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b54de:	2211      	movs	r2, #17
   b54e0:	f840 3b04 	str.w	r3, [r0], #4
   b54e4:	2100      	movs	r1, #0
   b54e6:	f001 fc4f 	bl	b6d88 <memset>
}
   b54ea:	4620      	mov	r0, r4
   b54ec:	bd10      	pop	{r4, pc}
   b54ee:	bf00      	nop
   b54f0:	000b7078 	.word	0x000b7078

000b54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54f4:	4603      	mov	r3, r0
   b54f6:	4a07      	ldr	r2, [pc, #28]	; (b5514 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54f8:	b510      	push	{r4, lr}
   b54fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54fe:	f101 0210 	add.w	r2, r1, #16
   b5502:	f851 4b04 	ldr.w	r4, [r1], #4
   b5506:	f843 4b04 	str.w	r4, [r3], #4
   b550a:	4291      	cmp	r1, r2
   b550c:	d1f9      	bne.n	b5502 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b550e:	780a      	ldrb	r2, [r1, #0]
   b5510:	701a      	strb	r2, [r3, #0]
}
   b5512:	bd10      	pop	{r4, pc}
   b5514:	000b7078 	.word	0x000b7078

000b5518 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5518:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b551a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b551e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5522:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5526:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b552a:	2304      	movs	r3, #4
   b552c:	6041      	str	r1, [r0, #4]
   b552e:	7503      	strb	r3, [r0, #20]
}
   b5530:	bd10      	pop	{r4, pc}
	...

000b5534 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5534:	b507      	push	{r0, r1, r2, lr}
   b5536:	4b06      	ldr	r3, [pc, #24]	; (b5550 <_ZN9IPAddressC1EPKh+0x1c>)
   b5538:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b553a:	78cb      	ldrb	r3, [r1, #3]
   b553c:	9300      	str	r3, [sp, #0]
   b553e:	788b      	ldrb	r3, [r1, #2]
   b5540:	784a      	ldrb	r2, [r1, #1]
   b5542:	7809      	ldrb	r1, [r1, #0]
   b5544:	f7ff ffe8 	bl	b5518 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5548:	b003      	add	sp, #12
   b554a:	f85d fb04 	ldr.w	pc, [sp], #4
   b554e:	bf00      	nop
   b5550:	000b7078 	.word	0x000b7078

000b5554 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5554:	4b01      	ldr	r3, [pc, #4]	; (b555c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5556:	4a02      	ldr	r2, [pc, #8]	; (b5560 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5558:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b555a:	4770      	bx	lr
   b555c:	2003e6d0 	.word	0x2003e6d0
   b5560:	000b7084 	.word	0x000b7084

000b5564 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5564:	2300      	movs	r3, #0
   b5566:	6840      	ldr	r0, [r0, #4]
   b5568:	461a      	mov	r2, r3
   b556a:	f7ff bb29 	b.w	b4bc0 <network_connect>

000b556e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b556e:	6840      	ldr	r0, [r0, #4]
   b5570:	2200      	movs	r2, #0
   b5572:	2102      	movs	r1, #2
   b5574:	f7ff bb34 	b.w	b4be0 <network_disconnect>

000b5578 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5578:	2200      	movs	r2, #0
   b557a:	6840      	ldr	r0, [r0, #4]
   b557c:	4611      	mov	r1, r2
   b557e:	f7ff bb27 	b.w	b4bd0 <network_connecting>

000b5582 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5582:	2200      	movs	r2, #0
   b5584:	6840      	ldr	r0, [r0, #4]
   b5586:	4611      	mov	r1, r2
   b5588:	f7ff bb32 	b.w	b4bf0 <network_ready>

000b558c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b558c:	2300      	movs	r3, #0
   b558e:	6840      	ldr	r0, [r0, #4]
   b5590:	461a      	mov	r2, r3
   b5592:	4619      	mov	r1, r3
   b5594:	f7ff bb34 	b.w	b4c00 <network_on>

000b5598 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5598:	2300      	movs	r3, #0
   b559a:	6840      	ldr	r0, [r0, #4]
   b559c:	461a      	mov	r2, r3
   b559e:	4619      	mov	r1, r3
   b55a0:	f7ff bb36 	b.w	b4c10 <network_off>

000b55a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b55a4:	6840      	ldr	r0, [r0, #4]
   b55a6:	2100      	movs	r1, #0
   b55a8:	f7ff bb5a 	b.w	b4c60 <network_is_on>

000b55ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b55ac:	6840      	ldr	r0, [r0, #4]
   b55ae:	2100      	movs	r1, #0
   b55b0:	f7ff bb5e 	b.w	b4c70 <network_is_off>

000b55b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b55b4:	6840      	ldr	r0, [r0, #4]
   b55b6:	2200      	movs	r2, #0
   b55b8:	f081 0101 	eor.w	r1, r1, #1
   b55bc:	f7ff bb30 	b.w	b4c20 <network_listen>

000b55c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	2200      	movs	r2, #0
   b55c4:	f7ff bb3c 	b.w	b4c40 <network_set_listen_timeout>

000b55c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b55c8:	2200      	movs	r2, #0
   b55ca:	6840      	ldr	r0, [r0, #4]
   b55cc:	4611      	mov	r1, r2
   b55ce:	f7ff bb3f 	b.w	b4c50 <network_get_listen_timeout>

000b55d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b55d2:	2200      	movs	r2, #0
   b55d4:	6840      	ldr	r0, [r0, #4]
   b55d6:	4611      	mov	r1, r2
   b55d8:	f7ff bb2a 	b.w	b4c30 <network_listening>

000b55dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b55dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55e0:	b095      	sub	sp, #84	; 0x54
   b55e2:	4614      	mov	r4, r2
   b55e4:	460d      	mov	r5, r1
   b55e6:	4607      	mov	r7, r0
    IPAddress addr;
   b55e8:	f7ff ff76 	bl	b54d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b55ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b55ee:	221c      	movs	r2, #28
   b55f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b55f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b55f4:	f001 fbc8 	bl	b6d88 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b55f8:	2340      	movs	r3, #64	; 0x40
   b55fa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b55fc:	4620      	mov	r0, r4
   b55fe:	466b      	mov	r3, sp
   b5600:	aa0c      	add	r2, sp, #48	; 0x30
   b5602:	2100      	movs	r1, #0
   b5604:	f7ff fa18 	bl	b4a38 <netdb_getaddrinfo>
    if (!r) {
   b5608:	4604      	mov	r4, r0
   b560a:	2800      	cmp	r0, #0
   b560c:	d14b      	bne.n	b56a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b560e:	4602      	mov	r2, r0
   b5610:	2101      	movs	r1, #1
   b5612:	6868      	ldr	r0, [r5, #4]
   b5614:	f7ff faec 	bl	b4bf0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5618:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b561a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b561c:	4622      	mov	r2, r4
   b561e:	6868      	ldr	r0, [r5, #4]
   b5620:	f7ff fae6 	bl	b4bf0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5624:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5626:	4681      	mov	r9, r0
        bool ok = false;
   b5628:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b562a:	2e00      	cmp	r6, #0
   b562c:	d03b      	beq.n	b56a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b562e:	2900      	cmp	r1, #0
   b5630:	d139      	bne.n	b56a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5632:	6873      	ldr	r3, [r6, #4]
   b5634:	2b02      	cmp	r3, #2
   b5636:	d003      	beq.n	b5640 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5638:	2b0a      	cmp	r3, #10
   b563a:	d011      	beq.n	b5660 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b563c:	69f6      	ldr	r6, [r6, #28]
   b563e:	e7f4      	b.n	b562a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5640:	f1b8 0f00 	cmp.w	r8, #0
   b5644:	d0fa      	beq.n	b563c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5646:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5648:	a806      	add	r0, sp, #24
   b564a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b564c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b564e:	f7ff ff71 	bl	b5534 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5654:	1d3c      	adds	r4, r7, #4
   b5656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5658:	682b      	ldr	r3, [r5, #0]
   b565a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b565c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b565e:	e7ed      	b.n	b563c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5660:	f1b9 0f00 	cmp.w	r9, #0
   b5664:	d0ea      	beq.n	b563c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5666:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5668:	2210      	movs	r2, #16
   b566a:	a801      	add	r0, sp, #4
   b566c:	f001 fb8c 	bl	b6d88 <memset>
                    a.v = 6;
   b5670:	2306      	movs	r3, #6
   b5672:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5676:	ad01      	add	r5, sp, #4
   b5678:	f104 0308 	add.w	r3, r4, #8
   b567c:	3418      	adds	r4, #24
   b567e:	6818      	ldr	r0, [r3, #0]
   b5680:	6859      	ldr	r1, [r3, #4]
   b5682:	462a      	mov	r2, r5
   b5684:	c203      	stmia	r2!, {r0, r1}
   b5686:	3308      	adds	r3, #8
   b5688:	42a3      	cmp	r3, r4
   b568a:	4615      	mov	r5, r2
   b568c:	d1f7      	bne.n	b567e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b568e:	a901      	add	r1, sp, #4
   b5690:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5692:	ad07      	add	r5, sp, #28
   b5694:	f7ff ff2e 	bl	b54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b569a:	1d3c      	adds	r4, r7, #4
   b569c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b569e:	682b      	ldr	r3, [r5, #0]
   b56a0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b56a2:	4649      	mov	r1, r9
   b56a4:	e7ca      	b.n	b563c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b56a6:	9800      	ldr	r0, [sp, #0]
   b56a8:	f7ff f9be 	bl	b4a28 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b56ac:	4638      	mov	r0, r7
   b56ae:	b015      	add	sp, #84	; 0x54
   b56b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b56b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b56b4:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b56b6:	4a03      	ldr	r2, [pc, #12]	; (b56c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b56b8:	601a      	str	r2, [r3, #0]
   b56ba:	2200      	movs	r2, #0
   b56bc:	605a      	str	r2, [r3, #4]

} // spark
   b56be:	4770      	bx	lr
   b56c0:	2003e6d4 	.word	0x2003e6d4
   b56c4:	000b7090 	.word	0x000b7090

000b56c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b56c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56ca:	4606      	mov	r6, r0
   b56cc:	460d      	mov	r5, r1
  size_t n = 0;
   b56ce:	188f      	adds	r7, r1, r2
   b56d0:	2400      	movs	r4, #0
  while (size--) {
   b56d2:	42bd      	cmp	r5, r7
   b56d4:	d00c      	beq.n	b56f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b56d6:	6833      	ldr	r3, [r6, #0]
   b56d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b56dc:	689b      	ldr	r3, [r3, #8]
   b56de:	4630      	mov	r0, r6
   b56e0:	4798      	blx	r3
     if (chunk>=0)
   b56e2:	1e03      	subs	r3, r0, #0
   b56e4:	db01      	blt.n	b56ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b56e6:	441c      	add	r4, r3
  while (size--) {
   b56e8:	e7f3      	b.n	b56d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b56ea:	2c00      	cmp	r4, #0
   b56ec:	bf08      	it	eq
   b56ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b56f0:	4620      	mov	r0, r4
   b56f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b56f4:	b513      	push	{r0, r1, r4, lr}
   b56f6:	4604      	mov	r4, r0
    }
   b56f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b56fa:	b159      	cbz	r1, b5714 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b56fc:	9101      	str	r1, [sp, #4]
   b56fe:	f001 fb96 	bl	b6e2e <strlen>
   b5702:	6823      	ldr	r3, [r4, #0]
   b5704:	9901      	ldr	r1, [sp, #4]
   b5706:	68db      	ldr	r3, [r3, #12]
   b5708:	4602      	mov	r2, r0
   b570a:	4620      	mov	r0, r4
    }
   b570c:	b002      	add	sp, #8
   b570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5712:	4718      	bx	r3
    }
   b5714:	b002      	add	sp, #8
   b5716:	bd10      	pop	{r4, pc}

000b5718 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5718:	b508      	push	{r3, lr}
  return write(str);
   b571a:	f7ff ffeb 	bl	b56f4 <_ZN5Print5writeEPKc>
}
   b571e:	bd08      	pop	{r3, pc}

000b5720 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5720:	6803      	ldr	r3, [r0, #0]
   b5722:	689b      	ldr	r3, [r3, #8]
   b5724:	4718      	bx	r3

000b5726 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5726:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5728:	210d      	movs	r1, #13
{
   b572a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b572c:	f7ff fff8 	bl	b5720 <_ZN5Print5printEc>
  n += print('\n');
   b5730:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5732:	4604      	mov	r4, r0
  n += print('\n');
   b5734:	4628      	mov	r0, r5
   b5736:	f7ff fff3 	bl	b5720 <_ZN5Print5printEc>
  return n;
}
   b573a:	4420      	add	r0, r4
   b573c:	bd38      	pop	{r3, r4, r5, pc}

000b573e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b573e:	b538      	push	{r3, r4, r5, lr}
   b5740:	4605      	mov	r5, r0
  return write(str);
   b5742:	f7ff ffd7 	bl	b56f4 <_ZN5Print5writeEPKc>
   b5746:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5748:	4628      	mov	r0, r5
   b574a:	f7ff ffec 	bl	b5726 <_ZN5Print7printlnEv>
  return n;
}
   b574e:	4420      	add	r0, r4
   b5750:	bd38      	pop	{r3, r4, r5, pc}

000b5752 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5752:	b530      	push	{r4, r5, lr}
   b5754:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5756:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5758:	2a01      	cmp	r2, #1
  *str = '\0';
   b575a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b575e:	bf98      	it	ls
   b5760:	220a      	movls	r2, #10
   b5762:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5764:	460d      	mov	r5, r1
   b5766:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b576a:	fb01 5312 	mls	r3, r1, r2, r5
   b576e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5772:	2b09      	cmp	r3, #9
   b5774:	bf94      	ite	ls
   b5776:	3330      	addls	r3, #48	; 0x30
   b5778:	3337      	addhi	r3, #55	; 0x37
   b577a:	b2db      	uxtb	r3, r3
  } while(n);
   b577c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b577e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5782:	d9ef      	bls.n	b5764 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5784:	4621      	mov	r1, r4
   b5786:	f7ff ffb5 	bl	b56f4 <_ZN5Print5writeEPKc>
}
   b578a:	b00b      	add	sp, #44	; 0x2c
   b578c:	bd30      	pop	{r4, r5, pc}
	...

000b5790 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5794:	ec55 4b10 	vmov	r4, r5, d0
   b5798:	4606      	mov	r6, r0
   b579a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b579c:	ee10 2a10 	vmov	r2, s0
   b57a0:	ee10 0a10 	vmov	r0, s0
   b57a4:	462b      	mov	r3, r5
   b57a6:	4629      	mov	r1, r5
   b57a8:	f001 f88c 	bl	b68c4 <__aeabi_dcmpun>
   b57ac:	b140      	cbz	r0, b57c0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b57ae:	4953      	ldr	r1, [pc, #332]	; (b58fc <_ZN5Print10printFloatEdh+0x16c>)
   b57b0:	4630      	mov	r0, r6
   b57b2:	f7ff ff9f 	bl	b56f4 <_ZN5Print5writeEPKc>
   b57b6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b57b8:	4650      	mov	r0, sl
   b57ba:	b003      	add	sp, #12
   b57bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b57c0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b57c4:	4b4e      	ldr	r3, [pc, #312]	; (b5900 <_ZN5Print10printFloatEdh+0x170>)
   b57c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b57ca:	4620      	mov	r0, r4
   b57cc:	4649      	mov	r1, r9
   b57ce:	f001 f879 	bl	b68c4 <__aeabi_dcmpun>
   b57d2:	b948      	cbnz	r0, b57e8 <_ZN5Print10printFloatEdh+0x58>
   b57d4:	4b4a      	ldr	r3, [pc, #296]	; (b5900 <_ZN5Print10printFloatEdh+0x170>)
   b57d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b57da:	4620      	mov	r0, r4
   b57dc:	4649      	mov	r1, r9
   b57de:	f001 f853 	bl	b6888 <__aeabi_dcmple>
   b57e2:	b908      	cbnz	r0, b57e8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b57e4:	4947      	ldr	r1, [pc, #284]	; (b5904 <_ZN5Print10printFloatEdh+0x174>)
   b57e6:	e7e3      	b.n	b57b0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b57e8:	4b47      	ldr	r3, [pc, #284]	; (b5908 <_ZN5Print10printFloatEdh+0x178>)
   b57ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b57ee:	4620      	mov	r0, r4
   b57f0:	4629      	mov	r1, r5
   b57f2:	f001 f85d 	bl	b68b0 <__aeabi_dcmpgt>
   b57f6:	b108      	cbz	r0, b57fc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b57f8:	4944      	ldr	r1, [pc, #272]	; (b590c <_ZN5Print10printFloatEdh+0x17c>)
   b57fa:	e7d9      	b.n	b57b0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b57fc:	4b44      	ldr	r3, [pc, #272]	; (b5910 <_ZN5Print10printFloatEdh+0x180>)
   b57fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5802:	4620      	mov	r0, r4
   b5804:	4629      	mov	r1, r5
   b5806:	f001 f835 	bl	b6874 <__aeabi_dcmplt>
   b580a:	2800      	cmp	r0, #0
   b580c:	d1f4      	bne.n	b57f8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b580e:	2200      	movs	r2, #0
   b5810:	2300      	movs	r3, #0
   b5812:	4620      	mov	r0, r4
   b5814:	4629      	mov	r1, r5
   b5816:	f001 f82d 	bl	b6874 <__aeabi_dcmplt>
   b581a:	b1d0      	cbz	r0, b5852 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b581c:	212d      	movs	r1, #45	; 0x2d
   b581e:	4630      	mov	r0, r6
   b5820:	f7ff ff7e 	bl	b5720 <_ZN5Print5printEc>
     number = -number;
   b5824:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5828:	4682      	mov	sl, r0
     number = -number;
   b582a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b582c:	4939      	ldr	r1, [pc, #228]	; (b5914 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b582e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b591c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5832:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5836:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5838:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b583c:	fa5f f38b 	uxtb.w	r3, fp
   b5840:	429f      	cmp	r7, r3
   b5842:	d908      	bls.n	b5856 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5844:	4642      	mov	r2, r8
   b5846:	464b      	mov	r3, r9
   b5848:	f000 fecc 	bl	b65e4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b584c:	f10b 0b01 	add.w	fp, fp, #1
   b5850:	e7f4      	b.n	b583c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5852:	4682      	mov	sl, r0
   b5854:	e7ea      	b.n	b582c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5856:	4622      	mov	r2, r4
   b5858:	462b      	mov	r3, r5
   b585a:	f000 fbe3 	bl	b6024 <__adddf3>
   b585e:	460d      	mov	r5, r1
   b5860:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5862:	f001 f86d 	bl	b6940 <__aeabi_d2uiz>
   b5866:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5868:	f000 fd18 	bl	b629c <__aeabi_ui2d>
   b586c:	4602      	mov	r2, r0
   b586e:	460b      	mov	r3, r1
   b5870:	4620      	mov	r0, r4
   b5872:	4629      	mov	r1, r5
   b5874:	f000 fbd4 	bl	b6020 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5878:	220a      	movs	r2, #10
   b587a:	4604      	mov	r4, r0
   b587c:	460d      	mov	r5, r1
   b587e:	4630      	mov	r0, r6
   b5880:	4641      	mov	r1, r8
   b5882:	f7ff ff66 	bl	b5752 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5886:	4482      	add	sl, r0
  if (digits > 0) {
   b5888:	2f00      	cmp	r7, #0
   b588a:	d095      	beq.n	b57b8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b588c:	4922      	ldr	r1, [pc, #136]	; (b5918 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b588e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b591c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5892:	4630      	mov	r0, r6
   b5894:	f7ff ff2e 	bl	b56f4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5898:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b589c:	4482      	add	sl, r0
  while (digits-- > 0)
   b589e:	2f00      	cmp	r7, #0
   b58a0:	d08a      	beq.n	b57b8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b58a2:	4642      	mov	r2, r8
   b58a4:	464b      	mov	r3, r9
   b58a6:	4620      	mov	r0, r4
   b58a8:	4629      	mov	r1, r5
   b58aa:	f000 fd71 	bl	b6390 <__aeabi_dmul>
   b58ae:	4604      	mov	r4, r0
   b58b0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b58b2:	f001 f81d 	bl	b68f0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b58b6:	f1b0 0b00 	subs.w	fp, r0, #0
   b58ba:	da1c      	bge.n	b58f6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b58bc:	212d      	movs	r1, #45	; 0x2d
   b58be:	4630      	mov	r0, r6
   b58c0:	f7ff ff2e 	bl	b5720 <_ZN5Print5printEc>
            val = -n;
   b58c4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b58c8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b58ca:	220a      	movs	r2, #10
   b58cc:	4630      	mov	r0, r6
   b58ce:	9301      	str	r3, [sp, #4]
   b58d0:	f7ff ff3f 	bl	b5752 <_ZN5Print11printNumberEmh>
   b58d4:	9b01      	ldr	r3, [sp, #4]
   b58d6:	4418      	add	r0, r3
    n += print(toPrint);
   b58d8:	4482      	add	sl, r0
    remainder -= toPrint;
   b58da:	4658      	mov	r0, fp
   b58dc:	f000 fcee 	bl	b62bc <__aeabi_i2d>
   b58e0:	4602      	mov	r2, r0
   b58e2:	460b      	mov	r3, r1
   b58e4:	4620      	mov	r0, r4
   b58e6:	4629      	mov	r1, r5
   b58e8:	f000 fb9a 	bl	b6020 <__aeabi_dsub>
   b58ec:	3f01      	subs	r7, #1
   b58ee:	4604      	mov	r4, r0
   b58f0:	460d      	mov	r5, r1
   b58f2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b58f4:	e7d3      	b.n	b589e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b58f6:	4659      	mov	r1, fp
        size_t t = 0;
   b58f8:	2300      	movs	r3, #0
   b58fa:	e7e6      	b.n	b58ca <_ZN5Print10printFloatEdh+0x13a>
   b58fc:	000b70c4 	.word	0x000b70c4
   b5900:	7fefffff 	.word	0x7fefffff
   b5904:	000b70c8 	.word	0x000b70c8
   b5908:	41efffff 	.word	0x41efffff
   b590c:	000b70cc 	.word	0x000b70cc
   b5910:	c1efffff 	.word	0xc1efffff
   b5914:	3fe00000 	.word	0x3fe00000
   b5918:	000b6f2e 	.word	0x000b6f2e
   b591c:	40240000 	.word	0x40240000

000b5920 <_ZN5Print5printEfi>:
{
   b5920:	b538      	push	{r3, r4, r5, lr}
   b5922:	4604      	mov	r4, r0
   b5924:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b5928:	b2cd      	uxtb	r5, r1
   b592a:	f000 fcd9 	bl	b62e0 <__aeabi_f2d>
   b592e:	ec41 0b10 	vmov	d0, r0, r1
   b5932:	4629      	mov	r1, r5
   b5934:	4620      	mov	r0, r4
}
   b5936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b593a:	f7ff bf29 	b.w	b5790 <_ZN5Print10printFloatEdh>
	...

000b5940 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5940:	4b01      	ldr	r3, [pc, #4]	; (b5948 <_GLOBAL__sub_I_RGB+0x8>)
   b5942:	2200      	movs	r2, #0
   b5944:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5946:	4770      	bx	lr
   b5948:	2003e6dc 	.word	0x2003e6dc

000b594c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b594c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5950:	ec57 6b10 	vmov	r6, r7, d0
   b5954:	4680      	mov	r8, r0
   b5956:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b5958:	ee10 0a10 	vmov	r0, s0
   b595c:	2200      	movs	r2, #0
   b595e:	2300      	movs	r3, #0
   b5960:	4639      	mov	r1, r7
   b5962:	f000 ff87 	bl	b6874 <__aeabi_dcmplt>
   b5966:	b128      	cbz	r0, b5974 <_Z4dtoadhPc+0x28>
        val = -val;
   b5968:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b596c:	461f      	mov	r7, r3
        *sout++ = '-';
   b596e:	232d      	movs	r3, #45	; 0x2d
   b5970:	f804 3b01 	strb.w	r3, [r4], #1
   b5974:	2300      	movs	r3, #0
    }
    long scale = 1;
   b5976:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b597a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b597c:	b2d9      	uxtb	r1, r3
   b597e:	4588      	cmp	r8, r1
   b5980:	d903      	bls.n	b598a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b5982:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b5986:	3301      	adds	r3, #1
   b5988:	e7f8      	b.n	b597c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b598a:	4648      	mov	r0, r9
   b598c:	f000 fc96 	bl	b62bc <__aeabi_i2d>
   b5990:	4632      	mov	r2, r6
   b5992:	463b      	mov	r3, r7
   b5994:	f000 fcfc 	bl	b6390 <__aeabi_dmul>
   b5998:	4606      	mov	r6, r0
   b599a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b599c:	f001 f858 	bl	b6a50 <__aeabi_d2ulz>
   b59a0:	468a      	mov	sl, r1
   b59a2:	4605      	mov	r5, r0
   b59a4:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b59a6:	f000 fcbd 	bl	b6324 <__aeabi_ul2d>
   b59aa:	4602      	mov	r2, r0
   b59ac:	460b      	mov	r3, r1
   b59ae:	4630      	mov	r0, r6
   b59b0:	4639      	mov	r1, r7
   b59b2:	f000 fb35 	bl	b6020 <__aeabi_dsub>
   b59b6:	4b14      	ldr	r3, [pc, #80]	; (b5a08 <_Z4dtoadhPc+0xbc>)
   b59b8:	2200      	movs	r2, #0
   b59ba:	f000 ff6f 	bl	b689c <__aeabi_dcmpge>
   b59be:	b110      	cbz	r0, b59c6 <_Z4dtoadhPc+0x7a>
        fixed++;
   b59c0:	3501      	adds	r5, #1
   b59c2:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b59c6:	464a      	mov	r2, r9
   b59c8:	4628      	mov	r0, r5
   b59ca:	17d3      	asrs	r3, r2, #31
   b59cc:	4659      	mov	r1, fp
   b59ce:	f001 f827 	bl	b6a20 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b59d2:	2301      	movs	r3, #1
   b59d4:	4615      	mov	r5, r2
   b59d6:	4621      	mov	r1, r4
   b59d8:	220a      	movs	r2, #10
   b59da:	f000 f9d6 	bl	b5d8a <ultoa>
    if (prec) {
   b59de:	f1b8 0f00 	cmp.w	r8, #0
   b59e2:	d00e      	beq.n	b5a02 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b59e4:	4620      	mov	r0, r4
   b59e6:	f001 fa22 	bl	b6e2e <strlen>
        *sout++ = '.';
   b59ea:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b59ec:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b59ee:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b59f0:	220a      	movs	r2, #10
   b59f2:	4643      	mov	r3, r8
   b59f4:	3101      	adds	r1, #1
   b59f6:	4628      	mov	r0, r5
    }
}
   b59f8:	b001      	add	sp, #4
   b59fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b59fe:	f000 b9c4 	b.w	b5d8a <ultoa>
}
   b5a02:	b001      	add	sp, #4
   b5a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a08:	3fe00000 	.word	0x3fe00000

000b5a0c <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b5a0c:	b510      	push	{r4, lr}
   b5a0e:	4604      	mov	r4, r0
{
    free(buffer);
   b5a10:	6800      	ldr	r0, [r0, #0]
   b5a12:	f7ff f93d 	bl	b4c90 <free>
}
   b5a16:	4620      	mov	r0, r4
   b5a18:	bd10      	pop	{r4, pc}

000b5a1a <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b5a1a:	b510      	push	{r4, lr}
   b5a1c:	4604      	mov	r4, r0
    if (buffer) {
   b5a1e:	6800      	ldr	r0, [r0, #0]
   b5a20:	b108      	cbz	r0, b5a26 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b5a22:	f7ff f935 	bl	b4c90 <free>
    }
    buffer = nullptr;
   b5a26:	2300      	movs	r3, #0
    capacity = len = 0;
   b5a28:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b5a2c:	6023      	str	r3, [r4, #0]
}
   b5a2e:	bd10      	pop	{r4, pc}

000b5a30 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5a30:	b538      	push	{r3, r4, r5, lr}
   b5a32:	4604      	mov	r4, r0
   b5a34:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5a36:	6800      	ldr	r0, [r0, #0]
   b5a38:	3101      	adds	r1, #1
   b5a3a:	f7ff f931 	bl	b4ca0 <realloc>
    if (newbuffer) {
   b5a3e:	b110      	cbz	r0, b5a46 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b5a40:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b5a44:	2001      	movs	r0, #1
    }
    return 0;
}
   b5a46:	bd38      	pop	{r3, r4, r5, pc}

000b5a48 <_ZN6String7reserveEj>:
{
   b5a48:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b5a4a:	6803      	ldr	r3, [r0, #0]
{
   b5a4c:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b5a4e:	b123      	cbz	r3, b5a5a <_ZN6String7reserveEj+0x12>
   b5a50:	6843      	ldr	r3, [r0, #4]
   b5a52:	428b      	cmp	r3, r1
   b5a54:	d301      	bcc.n	b5a5a <_ZN6String7reserveEj+0x12>
   b5a56:	2001      	movs	r0, #1
}
   b5a58:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b5a5a:	4620      	mov	r0, r4
   b5a5c:	f7ff ffe8 	bl	b5a30 <_ZN6String12changeBufferEj>
   b5a60:	2800      	cmp	r0, #0
   b5a62:	d0f9      	beq.n	b5a58 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b5a64:	68a3      	ldr	r3, [r4, #8]
   b5a66:	2b00      	cmp	r3, #0
   b5a68:	d1f5      	bne.n	b5a56 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b5a6a:	6822      	ldr	r2, [r4, #0]
   b5a6c:	7013      	strb	r3, [r2, #0]
   b5a6e:	e7f2      	b.n	b5a56 <_ZN6String7reserveEj+0xe>

000b5a70 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a72:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b5a74:	4611      	mov	r1, r2
   b5a76:	9201      	str	r2, [sp, #4]
{
   b5a78:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b5a7a:	f7ff ffe5 	bl	b5a48 <_ZN6String7reserveEj>
   b5a7e:	9a01      	ldr	r2, [sp, #4]
   b5a80:	b928      	cbnz	r0, b5a8e <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b5a82:	4620      	mov	r0, r4
   b5a84:	f7ff ffc9 	bl	b5a1a <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b5a88:	4620      	mov	r0, r4
   b5a8a:	b003      	add	sp, #12
   b5a8c:	bd30      	pop	{r4, r5, pc}
    len = length;
   b5a8e:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b5a90:	4629      	mov	r1, r5
   b5a92:	6820      	ldr	r0, [r4, #0]
   b5a94:	f001 f96a 	bl	b6d6c <memcpy>
    buffer[len] = 0;
   b5a98:	6822      	ldr	r2, [r4, #0]
   b5a9a:	68a3      	ldr	r3, [r4, #8]
   b5a9c:	2100      	movs	r1, #0
   b5a9e:	54d1      	strb	r1, [r2, r3]
    return *this;
   b5aa0:	e7f2      	b.n	b5a88 <_ZN6String4copyEPKcj+0x18>

000b5aa2 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5aa2:	b513      	push	{r0, r1, r4, lr}
   b5aa4:	4604      	mov	r4, r0
    if (cstr) {
   b5aa6:	b159      	cbz	r1, b5ac0 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b5aa8:	4608      	mov	r0, r1
   b5aaa:	9101      	str	r1, [sp, #4]
   b5aac:	f001 f9bf 	bl	b6e2e <strlen>
   b5ab0:	9901      	ldr	r1, [sp, #4]
   b5ab2:	4602      	mov	r2, r0
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f7ff ffdb 	bl	b5a70 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b5aba:	4620      	mov	r0, r4
   b5abc:	b002      	add	sp, #8
   b5abe:	bd10      	pop	{r4, pc}
        invalidate();
   b5ac0:	f7ff ffab 	bl	b5a1a <_ZN6String10invalidateEv>
   b5ac4:	e7f9      	b.n	b5aba <_ZN6StringaSEPKc+0x18>

000b5ac6 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b5ac6:	b570      	push	{r4, r5, r6, lr}
   b5ac8:	ee10 6a10 	vmov	r6, s0
   b5acc:	b08a      	sub	sp, #40	; 0x28
   b5ace:	460d      	mov	r5, r1
    buffer = nullptr;
   b5ad0:	2100      	movs	r1, #0
    char buf[33] = {};
   b5ad2:	221d      	movs	r2, #29
String::String(float value, int decimalPlaces)
   b5ad4:	4604      	mov	r4, r0
    capacity = 0;
   b5ad6:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
   b5ada:	6081      	str	r1, [r0, #8]
    flags = 0;
   b5adc:	7301      	strb	r1, [r0, #12]
    char buf[33] = {};
   b5ade:	a802      	add	r0, sp, #8
   b5ae0:	9101      	str	r1, [sp, #4]
   b5ae2:	f001 f951 	bl	b6d88 <memset>
    dtoa(value, decimalPlaces, buf);
   b5ae6:	4630      	mov	r0, r6
   b5ae8:	f000 fbfa 	bl	b62e0 <__aeabi_f2d>
   b5aec:	b2ed      	uxtb	r5, r5
   b5aee:	ec41 0b10 	vmov	d0, r0, r1
   b5af2:	a901      	add	r1, sp, #4
   b5af4:	4628      	mov	r0, r5
   b5af6:	f7ff ff29 	bl	b594c <_Z4dtoadhPc>
  *this = buf;
   b5afa:	a901      	add	r1, sp, #4
   b5afc:	4620      	mov	r0, r4
   b5afe:	f7ff ffd0 	bl	b5aa2 <_ZN6StringaSEPKc>
}
   b5b02:	4620      	mov	r0, r4
   b5b04:	b00a      	add	sp, #40	; 0x28
   b5b06:	bd70      	pop	{r4, r5, r6, pc}

000b5b08 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b08:	4b05      	ldr	r3, [pc, #20]	; (b5b20 <_GLOBAL__sub_I_System+0x18>)
   b5b0a:	2202      	movs	r2, #2
   b5b0c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b0e:	4b05      	ldr	r3, [pc, #20]	; (b5b24 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b10:	4a05      	ldr	r2, [pc, #20]	; (b5b28 <_GLOBAL__sub_I_System+0x20>)
   b5b12:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b14:	2000      	movs	r0, #0
   b5b16:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b1a:	f7ff b805 	b.w	b4b28 <set_system_mode>
   b5b1e:	bf00      	nop
   b5b20:	2003e6f8 	.word	0x2003e6f8
   b5b24:	2003e6ec 	.word	0x2003e6ec
   b5b28:	ffff0000 	.word	0xffff0000

000b5b2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b2c:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b2e:	681a      	ldr	r2, [r3, #0]
   b5b30:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b34:	4770      	bx	lr
   b5b36:	bf00      	nop
   b5b38:	2003e5ac 	.word	0x2003e5ac
   b5b3c:	2003e6fc 	.word	0x2003e6fc

000b5b40 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5b40:	4770      	bx	lr

000b5b42 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b42:	7441      	strb	r1, [r0, #17]
}
   b5b44:	4770      	bx	lr

000b5b46 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5b46:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5b48:	7c00      	ldrb	r0, [r0, #16]
   b5b4a:	f7fe ffa5 	bl	b4a98 <hal_usart_available_data_for_write>
}
   b5b4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b52:	bd08      	pop	{r3, pc}

000b5b54 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b54:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b56:	7c00      	ldrb	r0, [r0, #16]
   b5b58:	f7fe ff7e 	bl	b4a58 <hal_usart_available>
}
   b5b5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b60:	bd08      	pop	{r3, pc}

000b5b62 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b62:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b64:	7c00      	ldrb	r0, [r0, #16]
   b5b66:	f7fe ff87 	bl	b4a78 <hal_usart_peek>
}
   b5b6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b6e:	bd08      	pop	{r3, pc}

000b5b70 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5b70:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5b72:	7c00      	ldrb	r0, [r0, #16]
   b5b74:	f7fe ff78 	bl	b4a68 <hal_usart_read>
}
   b5b78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b7c:	bd08      	pop	{r3, pc}

000b5b7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5b7e:	7c00      	ldrb	r0, [r0, #16]
   b5b80:	f7fe bf82 	b.w	b4a88 <hal_usart_flush>

000b5b84 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b86:	7c45      	ldrb	r5, [r0, #17]
{
   b5b88:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b8a:	b12d      	cbz	r5, b5b98 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5b8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5b8e:	b003      	add	sp, #12
   b5b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5b94:	f7fe bf58 	b.w	b4a48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b98:	7c00      	ldrb	r0, [r0, #16]
   b5b9a:	9101      	str	r1, [sp, #4]
   b5b9c:	f7fe ff7c 	bl	b4a98 <hal_usart_available_data_for_write>
   b5ba0:	2800      	cmp	r0, #0
   b5ba2:	9901      	ldr	r1, [sp, #4]
   b5ba4:	dcf2      	bgt.n	b5b8c <_ZN11USARTSerial5writeEh+0x8>
}
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	b003      	add	sp, #12
   b5baa:	bd30      	pop	{r4, r5, pc}

000b5bac <_ZN11USARTSerialD0Ev>:
   b5bac:	b510      	push	{r4, lr}
   b5bae:	2114      	movs	r1, #20
   b5bb0:	4604      	mov	r4, r0
   b5bb2:	f7fe fa72 	bl	b409a <_ZdlPvj>
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	bd10      	pop	{r4, pc}
	...

000b5bbc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5bbc:	b510      	push	{r4, lr}
   b5bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bc2:	4604      	mov	r4, r0
   b5bc4:	4608      	mov	r0, r1
   b5bc6:	4611      	mov	r1, r2
   b5bc8:	2200      	movs	r2, #0
   b5bca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bce:	4b04      	ldr	r3, [pc, #16]	; (b5be0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5bd0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5bd2:	2301      	movs	r3, #1
  _serial = serial;
   b5bd4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5bd6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5bd8:	f7fe ff66 	bl	b4aa8 <hal_usart_init_ex>
}
   b5bdc:	4620      	mov	r0, r4
   b5bde:	bd10      	pop	{r4, pc}
   b5be0:	000b70f4 	.word	0x000b70f4

000b5be4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5be4:	7441      	strb	r1, [r0, #17]
}
   b5be6:	4770      	bx	lr

000b5be8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5be8:	4770      	bx	lr

000b5bea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5bea:	4770      	bx	lr

000b5bec <_ZN9USBSerial4readEv>:
{
   b5bec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5bee:	2100      	movs	r1, #0
   b5bf0:	7c00      	ldrb	r0, [r0, #16]
   b5bf2:	f7fe ff81 	bl	b4af8 <HAL_USB_USART_Receive_Data>
}
   b5bf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bfa:	bd08      	pop	{r3, pc}

000b5bfc <_ZN9USBSerial4peekEv>:
{
   b5bfc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5bfe:	2101      	movs	r1, #1
   b5c00:	7c00      	ldrb	r0, [r0, #16]
   b5c02:	f7fe ff79 	bl	b4af8 <HAL_USB_USART_Receive_Data>
}
   b5c06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c0a:	bd08      	pop	{r3, pc}

000b5c0c <_ZN9USBSerial17availableForWriteEv>:
{
   b5c0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c0e:	7c00      	ldrb	r0, [r0, #16]
   b5c10:	f7fe ff6a 	bl	b4ae8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c18:	bd08      	pop	{r3, pc}

000b5c1a <_ZN9USBSerial9availableEv>:
{
   b5c1a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c1c:	7c00      	ldrb	r0, [r0, #16]
   b5c1e:	f7fe ff5b 	bl	b4ad8 <HAL_USB_USART_Available_Data>
}
   b5c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c26:	bd08      	pop	{r3, pc}

000b5c28 <_ZN9USBSerial5writeEh>:
{
   b5c28:	b513      	push	{r0, r1, r4, lr}
   b5c2a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
{
   b5c2e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c30:	f7fe ff5a 	bl	b4ae8 <HAL_USB_USART_Available_Data_For_Write>
   b5c34:	2800      	cmp	r0, #0
   b5c36:	9901      	ldr	r1, [sp, #4]
   b5c38:	dc01      	bgt.n	b5c3e <_ZN9USBSerial5writeEh+0x16>
   b5c3a:	7c60      	ldrb	r0, [r4, #17]
   b5c3c:	b120      	cbz	r0, b5c48 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5c3e:	7c20      	ldrb	r0, [r4, #16]
   b5c40:	f7fe ff62 	bl	b4b08 <HAL_USB_USART_Send_Data>
   b5c44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5c48:	b002      	add	sp, #8
   b5c4a:	bd10      	pop	{r4, pc}

000b5c4c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5c4c:	7c00      	ldrb	r0, [r0, #16]
   b5c4e:	f7fe bf63 	b.w	b4b18 <HAL_USB_USART_Flush_Data>

000b5c52 <_ZN9USBSerialD0Ev>:
   b5c52:	b510      	push	{r4, lr}
   b5c54:	2114      	movs	r1, #20
   b5c56:	4604      	mov	r4, r0
   b5c58:	f7fe fa1f 	bl	b409a <_ZdlPvj>
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	bd10      	pop	{r4, pc}

000b5c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c60:	b510      	push	{r4, lr}
   b5c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c66:	4604      	mov	r4, r0
   b5c68:	4608      	mov	r0, r1
   b5c6a:	2100      	movs	r1, #0
   b5c6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5c70:	4b04      	ldr	r3, [pc, #16]	; (b5c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5c72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5c74:	2301      	movs	r3, #1
  _serial = serial;
   b5c76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5c7a:	4611      	mov	r1, r2
   b5c7c:	f7fe ff1c 	bl	b4ab8 <HAL_USB_USART_Init>
}
   b5c80:	4620      	mov	r0, r4
   b5c82:	bd10      	pop	{r4, pc}
   b5c84:	000b7124 	.word	0x000b7124

000b5c88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5c88:	7c00      	ldrb	r0, [r0, #16]
   b5c8a:	2200      	movs	r2, #0
   b5c8c:	f7fe bf1c 	b.w	b4ac8 <HAL_USB_USART_Begin>

000b5c90 <_Z19acquireSerialBufferv>:
{
   b5c90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5c92:	2214      	movs	r2, #20
{
   b5c94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5c96:	2100      	movs	r1, #0
   b5c98:	f001 f876 	bl	b6d88 <memset>
}
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	bd10      	pop	{r4, pc}

000b5ca0 <_Z16_fetch_usbserialv>:
{
   b5ca0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ca2:	4c0f      	ldr	r4, [pc, #60]	; (b5ce0 <_Z16_fetch_usbserialv+0x40>)
{
   b5ca4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5ca6:	a803      	add	r0, sp, #12
   b5ca8:	f7ff fff2 	bl	b5c90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cac:	7821      	ldrb	r1, [r4, #0]
   b5cae:	f3bf 8f5b 	dmb	ish
   b5cb2:	f011 0101 	ands.w	r1, r1, #1
   b5cb6:	d10f      	bne.n	b5cd8 <_Z16_fetch_usbserialv+0x38>
   b5cb8:	4620      	mov	r0, r4
   b5cba:	9101      	str	r1, [sp, #4]
   b5cbc:	f7fe f9ef 	bl	b409e <__cxa_guard_acquire>
   b5cc0:	9901      	ldr	r1, [sp, #4]
   b5cc2:	b148      	cbz	r0, b5cd8 <_Z16_fetch_usbserialv+0x38>
   b5cc4:	aa03      	add	r2, sp, #12
   b5cc6:	4807      	ldr	r0, [pc, #28]	; (b5ce4 <_Z16_fetch_usbserialv+0x44>)
   b5cc8:	f7ff ffca 	bl	b5c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5ccc:	4620      	mov	r0, r4
   b5cce:	f7fe f9eb 	bl	b40a8 <__cxa_guard_release>
   b5cd2:	4805      	ldr	r0, [pc, #20]	; (b5ce8 <_Z16_fetch_usbserialv+0x48>)
   b5cd4:	f001 f844 	bl	b6d60 <atexit>
	return _usbserial;
}
   b5cd8:	4802      	ldr	r0, [pc, #8]	; (b5ce4 <_Z16_fetch_usbserialv+0x44>)
   b5cda:	b008      	add	sp, #32
   b5cdc:	bd10      	pop	{r4, pc}
   b5cde:	bf00      	nop
   b5ce0:	2003e700 	.word	0x2003e700
   b5ce4:	2003e704 	.word	0x2003e704
   b5ce8:	000b5be9 	.word	0x000b5be9

000b5cec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5cec:	2200      	movs	r2, #0
   b5cee:	6840      	ldr	r0, [r0, #4]
   b5cf0:	4611      	mov	r1, r2
   b5cf2:	f7fe bf7d 	b.w	b4bf0 <network_ready>

000b5cf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5cf6:	2200      	movs	r2, #0
   b5cf8:	6840      	ldr	r0, [r0, #4]
   b5cfa:	4611      	mov	r1, r2
   b5cfc:	f7fe bf98 	b.w	b4c30 <network_listening>

000b5d00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d00:	2200      	movs	r2, #0
   b5d02:	6840      	ldr	r0, [r0, #4]
   b5d04:	4611      	mov	r1, r2
   b5d06:	f7fe bfa3 	b.w	b4c50 <network_get_listen_timeout>

000b5d0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d0a:	6840      	ldr	r0, [r0, #4]
   b5d0c:	2200      	movs	r2, #0
   b5d0e:	f7fe bf97 	b.w	b4c40 <network_set_listen_timeout>

000b5d12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d12:	6840      	ldr	r0, [r0, #4]
   b5d14:	2200      	movs	r2, #0
   b5d16:	f081 0101 	eor.w	r1, r1, #1
   b5d1a:	f7fe bf81 	b.w	b4c20 <network_listen>

000b5d1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d1e:	2300      	movs	r3, #0
   b5d20:	6840      	ldr	r0, [r0, #4]
   b5d22:	461a      	mov	r2, r3
   b5d24:	4619      	mov	r1, r3
   b5d26:	f7fe bf73 	b.w	b4c10 <network_off>

000b5d2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5d2a:	2300      	movs	r3, #0
   b5d2c:	6840      	ldr	r0, [r0, #4]
   b5d2e:	461a      	mov	r2, r3
   b5d30:	4619      	mov	r1, r3
   b5d32:	f7fe bf65 	b.w	b4c00 <network_on>

000b5d36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5d36:	2200      	movs	r2, #0
   b5d38:	6840      	ldr	r0, [r0, #4]
   b5d3a:	4611      	mov	r1, r2
   b5d3c:	f7fe bf48 	b.w	b4bd0 <network_connecting>

000b5d40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d40:	6840      	ldr	r0, [r0, #4]
   b5d42:	2200      	movs	r2, #0
   b5d44:	2102      	movs	r1, #2
   b5d46:	f7fe bf4b 	b.w	b4be0 <network_disconnect>

000b5d4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	6840      	ldr	r0, [r0, #4]
   b5d4e:	461a      	mov	r2, r3
   b5d50:	f7fe bf36 	b.w	b4bc0 <network_connect>

000b5d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5d54:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5d56:	2204      	movs	r2, #4
   b5d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5d5a:	4a02      	ldr	r2, [pc, #8]	; (b5d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5d5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5d5e:	4770      	bx	lr
   b5d60:	2003e718 	.word	0x2003e718
   b5d64:	000b7154 	.word	0x000b7154

000b5d68 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5d68:	b510      	push	{r4, lr}
   b5d6a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5d6c:	f001 f85f 	bl	b6e2e <strlen>
   b5d70:	3801      	subs	r0, #1
   b5d72:	1823      	adds	r3, r4, r0
   b5d74:	4620      	mov	r0, r4
	while(i<j){
   b5d76:	4283      	cmp	r3, r0
   b5d78:	d906      	bls.n	b5d88 <_Z11str_reversePc+0x20>
		c = *i;
   b5d7a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5d7c:	7819      	ldrb	r1, [r3, #0]
   b5d7e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5d82:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5d86:	e7f6      	b.n	b5d76 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5d88:	bd10      	pop	{r4, pc}

000b5d8a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5d8a:	b570      	push	{r4, r5, r6, lr}
   b5d8c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5d8e:	1e91      	subs	r1, r2, #2
   b5d90:	2922      	cmp	r1, #34	; 0x22
   b5d92:	d81d      	bhi.n	b5dd0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5d94:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5d96:	b930      	cbnz	r0, b5da6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5d98:	4423      	add	r3, r4
            *ptr++ = '0';
   b5d9a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5d9c:	429d      	cmp	r5, r3
   b5d9e:	d210      	bcs.n	b5dc2 <ultoa+0x38>
            *ptr++ = '0';
   b5da0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5da4:	e7fa      	b.n	b5d9c <ultoa+0x12>
            result.quot = a/radix;
   b5da6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5daa:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5dae:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5db0:	2809      	cmp	r0, #9
                *ptr += '0';
   b5db2:	bf94      	ite	ls
   b5db4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5db6:	3157      	addhi	r1, #87	; 0x57
   b5db8:	b2c9      	uxtb	r1, r1
   b5dba:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5dbe:	4630      	mov	r0, r6
	while(a){
   b5dc0:	e7e9      	b.n	b5d96 <ultoa+0xc>

	*ptr = '\0';
   b5dc2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5dc4:	4620      	mov	r0, r4
	*ptr = '\0';
   b5dc6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5dc8:	f7ff ffce 	bl	b5d68 <_Z11str_reversePc>
	return buffer;
   b5dcc:	4620      	mov	r0, r4
}
   b5dce:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5dd0:	2000      	movs	r0, #0
   b5dd2:	e7fc      	b.n	b5dce <ultoa+0x44>

000b5dd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5dd4:	4b01      	ldr	r3, [pc, #4]	; (b5ddc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5dd6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5dd8:	4770      	bx	lr
   b5dda:	bf00      	nop
   b5ddc:	2003e5b0 	.word	0x2003e5b0

000b5de0 <serialEventRun>:
{
   b5de0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5de2:	4b0b      	ldr	r3, [pc, #44]	; (b5e10 <serialEventRun+0x30>)
   b5de4:	b143      	cbz	r3, b5df8 <serialEventRun+0x18>
   b5de6:	f7ff ff5b 	bl	b5ca0 <_Z16_fetch_usbserialv>
   b5dea:	6803      	ldr	r3, [r0, #0]
   b5dec:	691b      	ldr	r3, [r3, #16]
   b5dee:	4798      	blx	r3
   b5df0:	2800      	cmp	r0, #0
   b5df2:	dd01      	ble.n	b5df8 <serialEventRun+0x18>
        serialEvent();
   b5df4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5df8:	4b06      	ldr	r3, [pc, #24]	; (b5e14 <serialEventRun+0x34>)
   b5dfa:	b143      	cbz	r3, b5e0e <serialEventRun+0x2e>
   b5dfc:	f000 f8e2 	bl	b5fc4 <_Z22__fetch_global_Serial1v>
   b5e00:	6803      	ldr	r3, [r0, #0]
   b5e02:	691b      	ldr	r3, [r3, #16]
   b5e04:	4798      	blx	r3
   b5e06:	2800      	cmp	r0, #0
   b5e08:	dd01      	ble.n	b5e0e <serialEventRun+0x2e>
        serialEvent1();
   b5e0a:	f3af 8000 	nop.w
}
   b5e0e:	bd08      	pop	{r3, pc}
	...

000b5e18 <_post_loop>:
{
   b5e18:	b508      	push	{r3, lr}
	serialEventRun();
   b5e1a:	f7ff ffe1 	bl	b5de0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5e1e:	f7fe fd9b 	bl	b4958 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5e22:	4b01      	ldr	r3, [pc, #4]	; (b5e28 <_post_loop+0x10>)
   b5e24:	6018      	str	r0, [r3, #0]
}
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	2003e728 	.word	0x2003e728

000b5e2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e2c:	4805      	ldr	r0, [pc, #20]	; (b5e44 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e2e:	4a06      	ldr	r2, [pc, #24]	; (b5e48 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e30:	4906      	ldr	r1, [pc, #24]	; (b5e4c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e32:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e34:	1a12      	subs	r2, r2, r0
   b5e36:	f000 ff99 	bl	b6d6c <memcpy>
    __backup_sram_signature = signature;
   b5e3a:	4b05      	ldr	r3, [pc, #20]	; (b5e50 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e3c:	4a05      	ldr	r2, [pc, #20]	; (b5e54 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e3e:	601a      	str	r2, [r3, #0]
}
   b5e40:	bd08      	pop	{r3, pc}
   b5e42:	bf00      	nop
   b5e44:	2003f400 	.word	0x2003f400
   b5e48:	2003f404 	.word	0x2003f404
   b5e4c:	000b724c 	.word	0x000b724c
   b5e50:	2003f400 	.word	0x2003f400
   b5e54:	9a271c1e 	.word	0x9a271c1e

000b5e58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5e58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e5a:	2300      	movs	r3, #0
   b5e5c:	9300      	str	r3, [sp, #0]
   b5e5e:	461a      	mov	r2, r3
   b5e60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e64:	f7fe fe8a 	bl	b4b7c <system_ctrl_set_result>
}
   b5e68:	b003      	add	sp, #12
   b5e6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e70 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e72:	8843      	ldrh	r3, [r0, #2]
   b5e74:	2b0a      	cmp	r3, #10
   b5e76:	d008      	beq.n	b5e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e78:	2b50      	cmp	r3, #80	; 0x50
   b5e7a:	d10b      	bne.n	b5e94 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e7c:	4b09      	ldr	r3, [pc, #36]	; (b5ea4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e7e:	681b      	ldr	r3, [r3, #0]
   b5e80:	b14b      	cbz	r3, b5e96 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e82:	b003      	add	sp, #12
   b5e84:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e88:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e8a:	f7ff ffe5 	bl	b5e58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e8e:	b003      	add	sp, #12
   b5e90:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e94:	2300      	movs	r3, #0
   b5e96:	9300      	str	r3, [sp, #0]
   b5e98:	461a      	mov	r2, r3
   b5e9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e9e:	f7fe fe6d 	bl	b4b7c <system_ctrl_set_result>
}
   b5ea2:	e7f4      	b.n	b5e8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5ea4:	2003e724 	.word	0x2003e724

000b5ea8 <module_user_init_hook>:
{
   b5ea8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5eaa:	4812      	ldr	r0, [pc, #72]	; (b5ef4 <module_user_init_hook+0x4c>)
   b5eac:	2100      	movs	r1, #0
   b5eae:	f7fe ff17 	bl	b4ce0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5eb2:	4b11      	ldr	r3, [pc, #68]	; (b5ef8 <module_user_init_hook+0x50>)
   b5eb4:	681a      	ldr	r2, [r3, #0]
   b5eb6:	4b11      	ldr	r3, [pc, #68]	; (b5efc <module_user_init_hook+0x54>)
   b5eb8:	429a      	cmp	r2, r3
   b5eba:	4b11      	ldr	r3, [pc, #68]	; (b5f00 <module_user_init_hook+0x58>)
   b5ebc:	bf0c      	ite	eq
   b5ebe:	2201      	moveq	r2, #1
   b5ec0:	2200      	movne	r2, #0
   b5ec2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5ec4:	d001      	beq.n	b5eca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5ec6:	f7ff ffb1 	bl	b5e2c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5eca:	f7fe fd3d 	bl	b4948 <HAL_RNG_GetRandomNumber>
   b5ece:	4604      	mov	r4, r0
    srand(seed);
   b5ed0:	f000 ff62 	bl	b6d98 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ed4:	4b0b      	ldr	r3, [pc, #44]	; (b5f04 <module_user_init_hook+0x5c>)
   b5ed6:	b113      	cbz	r3, b5ede <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5ed8:	4620      	mov	r0, r4
   b5eda:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5ede:	2100      	movs	r1, #0
   b5ee0:	4808      	ldr	r0, [pc, #32]	; (b5f04 <module_user_init_hook+0x5c>)
   b5ee2:	f7fe fe65 	bl	b4bb0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5eea:	4807      	ldr	r0, [pc, #28]	; (b5f08 <module_user_init_hook+0x60>)
   b5eec:	2100      	movs	r1, #0
   b5eee:	f7fe be3b 	b.w	b4b68 <system_ctrl_set_app_request_handler>
   b5ef2:	bf00      	nop
   b5ef4:	000b5dd5 	.word	0x000b5dd5
   b5ef8:	2003f400 	.word	0x2003f400
   b5efc:	9a271c1e 	.word	0x9a271c1e
   b5f00:	2003e720 	.word	0x2003e720
   b5f04:	00000000 	.word	0x00000000
   b5f08:	000b5e71 	.word	0x000b5e71

000b5f0c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f0c:	4770      	bx	lr
	...

000b5f10 <_Z17acquireWireBufferv>:
{
   b5f10:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f12:	4b0a      	ldr	r3, [pc, #40]	; (b5f3c <_Z17acquireWireBufferv+0x2c>)
   b5f14:	6003      	str	r3, [r0, #0]
   b5f16:	2301      	movs	r3, #1
{
   b5f18:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f1a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f1c:	4908      	ldr	r1, [pc, #32]	; (b5f40 <_Z17acquireWireBufferv+0x30>)
   b5f1e:	2020      	movs	r0, #32
   b5f20:	f000 f874 	bl	b600c <_ZnajRKSt9nothrow_t>
	};
   b5f24:	2520      	movs	r5, #32
   b5f26:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f28:	4905      	ldr	r1, [pc, #20]	; (b5f40 <_Z17acquireWireBufferv+0x30>)
	};
   b5f2a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f2c:	4628      	mov	r0, r5
   b5f2e:	f000 f86d 	bl	b600c <_ZnajRKSt9nothrow_t>
	};
   b5f32:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f36:	4620      	mov	r0, r4
   b5f38:	bd38      	pop	{r3, r4, r5, pc}
   b5f3a:	bf00      	nop
   b5f3c:	00010018 	.word	0x00010018
   b5f40:	000b7188 	.word	0x000b7188

000b5f44 <_Z19__fetch_global_Wirev>:
{
   b5f44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f46:	4d0e      	ldr	r5, [pc, #56]	; (b5f80 <_Z19__fetch_global_Wirev+0x3c>)
   b5f48:	7829      	ldrb	r1, [r5, #0]
   b5f4a:	f3bf 8f5b 	dmb	ish
   b5f4e:	f011 0401 	ands.w	r4, r1, #1
{
   b5f52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f54:	d111      	bne.n	b5f7a <_Z19__fetch_global_Wirev+0x36>
   b5f56:	4628      	mov	r0, r5
   b5f58:	f7fe f8a1 	bl	b409e <__cxa_guard_acquire>
   b5f5c:	b168      	cbz	r0, b5f7a <_Z19__fetch_global_Wirev+0x36>
   b5f5e:	4668      	mov	r0, sp
   b5f60:	f7ff ffd6 	bl	b5f10 <_Z17acquireWireBufferv>
   b5f64:	466a      	mov	r2, sp
   b5f66:	4621      	mov	r1, r4
   b5f68:	4806      	ldr	r0, [pc, #24]	; (b5f84 <_Z19__fetch_global_Wirev+0x40>)
   b5f6a:	f7ff fa19 	bl	b53a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5f6e:	4628      	mov	r0, r5
   b5f70:	f7fe f89a 	bl	b40a8 <__cxa_guard_release>
   b5f74:	4804      	ldr	r0, [pc, #16]	; (b5f88 <_Z19__fetch_global_Wirev+0x44>)
   b5f76:	f000 fef3 	bl	b6d60 <atexit>
	return wire;
}
   b5f7a:	4802      	ldr	r0, [pc, #8]	; (b5f84 <_Z19__fetch_global_Wirev+0x40>)
   b5f7c:	b007      	add	sp, #28
   b5f7e:	bd30      	pop	{r4, r5, pc}
   b5f80:	2003e72c 	.word	0x2003e72c
   b5f84:	2003e730 	.word	0x2003e730
   b5f88:	000b5f0d 	.word	0x000b5f0d

000b5f8c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f8c:	4770      	bx	lr
	...

000b5f90 <_Z20acquireSerial1Bufferv>:
{
   b5f90:	b538      	push	{r3, r4, r5, lr}
   b5f92:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5f94:	2514      	movs	r5, #20
   b5f96:	462a      	mov	r2, r5
   b5f98:	2100      	movs	r1, #0
   b5f9a:	f000 fef5 	bl	b6d88 <memset>
   b5f9e:	8025      	strh	r5, [r4, #0]
   b5fa0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fa2:	4907      	ldr	r1, [pc, #28]	; (b5fc0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5fa4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fa6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5fa8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5faa:	f000 f82f 	bl	b600c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fae:	4904      	ldr	r1, [pc, #16]	; (b5fc0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5fb0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fb2:	4628      	mov	r0, r5
   b5fb4:	f000 f82a 	bl	b600c <_ZnajRKSt9nothrow_t>
    };
   b5fb8:	60e0      	str	r0, [r4, #12]
}
   b5fba:	4620      	mov	r0, r4
   b5fbc:	bd38      	pop	{r3, r4, r5, pc}
   b5fbe:	bf00      	nop
   b5fc0:	000b7188 	.word	0x000b7188

000b5fc4 <_Z22__fetch_global_Serial1v>:
{
   b5fc4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fc6:	4d0e      	ldr	r5, [pc, #56]	; (b6000 <_Z22__fetch_global_Serial1v+0x3c>)
   b5fc8:	7829      	ldrb	r1, [r5, #0]
   b5fca:	f3bf 8f5b 	dmb	ish
   b5fce:	f011 0401 	ands.w	r4, r1, #1
{
   b5fd2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fd4:	d111      	bne.n	b5ffa <_Z22__fetch_global_Serial1v+0x36>
   b5fd6:	4628      	mov	r0, r5
   b5fd8:	f7fe f861 	bl	b409e <__cxa_guard_acquire>
   b5fdc:	b168      	cbz	r0, b5ffa <_Z22__fetch_global_Serial1v+0x36>
   b5fde:	a801      	add	r0, sp, #4
   b5fe0:	f7ff ffd6 	bl	b5f90 <_Z20acquireSerial1Bufferv>
   b5fe4:	aa01      	add	r2, sp, #4
   b5fe6:	4621      	mov	r1, r4
   b5fe8:	4806      	ldr	r0, [pc, #24]	; (b6004 <_Z22__fetch_global_Serial1v+0x40>)
   b5fea:	f7ff fde7 	bl	b5bbc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5fee:	4628      	mov	r0, r5
   b5ff0:	f7fe f85a 	bl	b40a8 <__cxa_guard_release>
   b5ff4:	4804      	ldr	r0, [pc, #16]	; (b6008 <_Z22__fetch_global_Serial1v+0x44>)
   b5ff6:	f000 feb3 	bl	b6d60 <atexit>
    return serial1;
}
   b5ffa:	4802      	ldr	r0, [pc, #8]	; (b6004 <_Z22__fetch_global_Serial1v+0x40>)
   b5ffc:	b007      	add	sp, #28
   b5ffe:	bd30      	pop	{r4, r5, pc}
   b6000:	2003e744 	.word	0x2003e744
   b6004:	2003e748 	.word	0x2003e748
   b6008:	000b5f8d 	.word	0x000b5f8d

000b600c <_ZnajRKSt9nothrow_t>:
   b600c:	f7fe b843 	b.w	b4096 <_Znaj>

000b6010 <_ZSt25__throw_bad_function_callv>:
   b6010:	b508      	push	{r3, lr}
   b6012:	f7fe fe4d 	bl	b4cb0 <abort>
	...

000b6018 <__aeabi_drsub>:
   b6018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b601c:	e002      	b.n	b6024 <__adddf3>
   b601e:	bf00      	nop

000b6020 <__aeabi_dsub>:
   b6020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6024 <__adddf3>:
   b6024:	b530      	push	{r4, r5, lr}
   b6026:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b602a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b602e:	ea94 0f05 	teq	r4, r5
   b6032:	bf08      	it	eq
   b6034:	ea90 0f02 	teqeq	r0, r2
   b6038:	bf1f      	itttt	ne
   b603a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b603e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b604a:	f000 80e2 	beq.w	b6212 <__adddf3+0x1ee>
   b604e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6056:	bfb8      	it	lt
   b6058:	426d      	neglt	r5, r5
   b605a:	dd0c      	ble.n	b6076 <__adddf3+0x52>
   b605c:	442c      	add	r4, r5
   b605e:	ea80 0202 	eor.w	r2, r0, r2
   b6062:	ea81 0303 	eor.w	r3, r1, r3
   b6066:	ea82 0000 	eor.w	r0, r2, r0
   b606a:	ea83 0101 	eor.w	r1, r3, r1
   b606e:	ea80 0202 	eor.w	r2, r0, r2
   b6072:	ea81 0303 	eor.w	r3, r1, r3
   b6076:	2d36      	cmp	r5, #54	; 0x36
   b6078:	bf88      	it	hi
   b607a:	bd30      	pophi	{r4, r5, pc}
   b607c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6080:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b608c:	d002      	beq.n	b6094 <__adddf3+0x70>
   b608e:	4240      	negs	r0, r0
   b6090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6098:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b609c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b60a0:	d002      	beq.n	b60a8 <__adddf3+0x84>
   b60a2:	4252      	negs	r2, r2
   b60a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b60a8:	ea94 0f05 	teq	r4, r5
   b60ac:	f000 80a7 	beq.w	b61fe <__adddf3+0x1da>
   b60b0:	f1a4 0401 	sub.w	r4, r4, #1
   b60b4:	f1d5 0e20 	rsbs	lr, r5, #32
   b60b8:	db0d      	blt.n	b60d6 <__adddf3+0xb2>
   b60ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   b60be:	fa22 f205 	lsr.w	r2, r2, r5
   b60c2:	1880      	adds	r0, r0, r2
   b60c4:	f141 0100 	adc.w	r1, r1, #0
   b60c8:	fa03 f20e 	lsl.w	r2, r3, lr
   b60cc:	1880      	adds	r0, r0, r2
   b60ce:	fa43 f305 	asr.w	r3, r3, r5
   b60d2:	4159      	adcs	r1, r3
   b60d4:	e00e      	b.n	b60f4 <__adddf3+0xd0>
   b60d6:	f1a5 0520 	sub.w	r5, r5, #32
   b60da:	f10e 0e20 	add.w	lr, lr, #32
   b60de:	2a01      	cmp	r2, #1
   b60e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b60e4:	bf28      	it	cs
   b60e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b60ea:	fa43 f305 	asr.w	r3, r3, r5
   b60ee:	18c0      	adds	r0, r0, r3
   b60f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b60f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b60f8:	d507      	bpl.n	b610a <__adddf3+0xe6>
   b60fa:	f04f 0e00 	mov.w	lr, #0
   b60fe:	f1dc 0c00 	rsbs	ip, ip, #0
   b6102:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6106:	eb6e 0101 	sbc.w	r1, lr, r1
   b610a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b610e:	d31b      	bcc.n	b6148 <__adddf3+0x124>
   b6110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6114:	d30c      	bcc.n	b6130 <__adddf3+0x10c>
   b6116:	0849      	lsrs	r1, r1, #1
   b6118:	ea5f 0030 	movs.w	r0, r0, rrx
   b611c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6120:	f104 0401 	add.w	r4, r4, #1
   b6124:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b612c:	f080 809a 	bcs.w	b6264 <__adddf3+0x240>
   b6130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6134:	bf08      	it	eq
   b6136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b613a:	f150 0000 	adcs.w	r0, r0, #0
   b613e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6142:	ea41 0105 	orr.w	r1, r1, r5
   b6146:	bd30      	pop	{r4, r5, pc}
   b6148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b614c:	4140      	adcs	r0, r0
   b614e:	eb41 0101 	adc.w	r1, r1, r1
   b6152:	3c01      	subs	r4, #1
   b6154:	bf28      	it	cs
   b6156:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b615a:	d2e9      	bcs.n	b6130 <__adddf3+0x10c>
   b615c:	f091 0f00 	teq	r1, #0
   b6160:	bf04      	itt	eq
   b6162:	4601      	moveq	r1, r0
   b6164:	2000      	moveq	r0, #0
   b6166:	fab1 f381 	clz	r3, r1
   b616a:	bf08      	it	eq
   b616c:	3320      	addeq	r3, #32
   b616e:	f1a3 030b 	sub.w	r3, r3, #11
   b6172:	f1b3 0220 	subs.w	r2, r3, #32
   b6176:	da0c      	bge.n	b6192 <__adddf3+0x16e>
   b6178:	320c      	adds	r2, #12
   b617a:	dd08      	ble.n	b618e <__adddf3+0x16a>
   b617c:	f102 0c14 	add.w	ip, r2, #20
   b6180:	f1c2 020c 	rsb	r2, r2, #12
   b6184:	fa01 f00c 	lsl.w	r0, r1, ip
   b6188:	fa21 f102 	lsr.w	r1, r1, r2
   b618c:	e00c      	b.n	b61a8 <__adddf3+0x184>
   b618e:	f102 0214 	add.w	r2, r2, #20
   b6192:	bfd8      	it	le
   b6194:	f1c2 0c20 	rsble	ip, r2, #32
   b6198:	fa01 f102 	lsl.w	r1, r1, r2
   b619c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b61a0:	bfdc      	itt	le
   b61a2:	ea41 010c 	orrle.w	r1, r1, ip
   b61a6:	4090      	lslle	r0, r2
   b61a8:	1ae4      	subs	r4, r4, r3
   b61aa:	bfa2      	ittt	ge
   b61ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b61b0:	4329      	orrge	r1, r5
   b61b2:	bd30      	popge	{r4, r5, pc}
   b61b4:	ea6f 0404 	mvn.w	r4, r4
   b61b8:	3c1f      	subs	r4, #31
   b61ba:	da1c      	bge.n	b61f6 <__adddf3+0x1d2>
   b61bc:	340c      	adds	r4, #12
   b61be:	dc0e      	bgt.n	b61de <__adddf3+0x1ba>
   b61c0:	f104 0414 	add.w	r4, r4, #20
   b61c4:	f1c4 0220 	rsb	r2, r4, #32
   b61c8:	fa20 f004 	lsr.w	r0, r0, r4
   b61cc:	fa01 f302 	lsl.w	r3, r1, r2
   b61d0:	ea40 0003 	orr.w	r0, r0, r3
   b61d4:	fa21 f304 	lsr.w	r3, r1, r4
   b61d8:	ea45 0103 	orr.w	r1, r5, r3
   b61dc:	bd30      	pop	{r4, r5, pc}
   b61de:	f1c4 040c 	rsb	r4, r4, #12
   b61e2:	f1c4 0220 	rsb	r2, r4, #32
   b61e6:	fa20 f002 	lsr.w	r0, r0, r2
   b61ea:	fa01 f304 	lsl.w	r3, r1, r4
   b61ee:	ea40 0003 	orr.w	r0, r0, r3
   b61f2:	4629      	mov	r1, r5
   b61f4:	bd30      	pop	{r4, r5, pc}
   b61f6:	fa21 f004 	lsr.w	r0, r1, r4
   b61fa:	4629      	mov	r1, r5
   b61fc:	bd30      	pop	{r4, r5, pc}
   b61fe:	f094 0f00 	teq	r4, #0
   b6202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6206:	bf06      	itte	eq
   b6208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b620c:	3401      	addeq	r4, #1
   b620e:	3d01      	subne	r5, #1
   b6210:	e74e      	b.n	b60b0 <__adddf3+0x8c>
   b6212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6216:	bf18      	it	ne
   b6218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b621c:	d029      	beq.n	b6272 <__adddf3+0x24e>
   b621e:	ea94 0f05 	teq	r4, r5
   b6222:	bf08      	it	eq
   b6224:	ea90 0f02 	teqeq	r0, r2
   b6228:	d005      	beq.n	b6236 <__adddf3+0x212>
   b622a:	ea54 0c00 	orrs.w	ip, r4, r0
   b622e:	bf04      	itt	eq
   b6230:	4619      	moveq	r1, r3
   b6232:	4610      	moveq	r0, r2
   b6234:	bd30      	pop	{r4, r5, pc}
   b6236:	ea91 0f03 	teq	r1, r3
   b623a:	bf1e      	ittt	ne
   b623c:	2100      	movne	r1, #0
   b623e:	2000      	movne	r0, #0
   b6240:	bd30      	popne	{r4, r5, pc}
   b6242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6246:	d105      	bne.n	b6254 <__adddf3+0x230>
   b6248:	0040      	lsls	r0, r0, #1
   b624a:	4149      	adcs	r1, r1
   b624c:	bf28      	it	cs
   b624e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6252:	bd30      	pop	{r4, r5, pc}
   b6254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6258:	bf3c      	itt	cc
   b625a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b625e:	bd30      	popcc	{r4, r5, pc}
   b6260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b626c:	f04f 0000 	mov.w	r0, #0
   b6270:	bd30      	pop	{r4, r5, pc}
   b6272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6276:	bf1a      	itte	ne
   b6278:	4619      	movne	r1, r3
   b627a:	4610      	movne	r0, r2
   b627c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6280:	bf1c      	itt	ne
   b6282:	460b      	movne	r3, r1
   b6284:	4602      	movne	r2, r0
   b6286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b628a:	bf06      	itte	eq
   b628c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6290:	ea91 0f03 	teqeq	r1, r3
   b6294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6298:	bd30      	pop	{r4, r5, pc}
   b629a:	bf00      	nop

000b629c <__aeabi_ui2d>:
   b629c:	f090 0f00 	teq	r0, #0
   b62a0:	bf04      	itt	eq
   b62a2:	2100      	moveq	r1, #0
   b62a4:	4770      	bxeq	lr
   b62a6:	b530      	push	{r4, r5, lr}
   b62a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b62ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b62b0:	f04f 0500 	mov.w	r5, #0
   b62b4:	f04f 0100 	mov.w	r1, #0
   b62b8:	e750      	b.n	b615c <__adddf3+0x138>
   b62ba:	bf00      	nop

000b62bc <__aeabi_i2d>:
   b62bc:	f090 0f00 	teq	r0, #0
   b62c0:	bf04      	itt	eq
   b62c2:	2100      	moveq	r1, #0
   b62c4:	4770      	bxeq	lr
   b62c6:	b530      	push	{r4, r5, lr}
   b62c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b62cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b62d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b62d4:	bf48      	it	mi
   b62d6:	4240      	negmi	r0, r0
   b62d8:	f04f 0100 	mov.w	r1, #0
   b62dc:	e73e      	b.n	b615c <__adddf3+0x138>
   b62de:	bf00      	nop

000b62e0 <__aeabi_f2d>:
   b62e0:	0042      	lsls	r2, r0, #1
   b62e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b62e6:	ea4f 0131 	mov.w	r1, r1, rrx
   b62ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b62ee:	bf1f      	itttt	ne
   b62f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b62f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b62f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b62fc:	4770      	bxne	lr
   b62fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6302:	bf08      	it	eq
   b6304:	4770      	bxeq	lr
   b6306:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b630a:	bf04      	itt	eq
   b630c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6310:	4770      	bxeq	lr
   b6312:	b530      	push	{r4, r5, lr}
   b6314:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b631c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6320:	e71c      	b.n	b615c <__adddf3+0x138>
   b6322:	bf00      	nop

000b6324 <__aeabi_ul2d>:
   b6324:	ea50 0201 	orrs.w	r2, r0, r1
   b6328:	bf08      	it	eq
   b632a:	4770      	bxeq	lr
   b632c:	b530      	push	{r4, r5, lr}
   b632e:	f04f 0500 	mov.w	r5, #0
   b6332:	e00a      	b.n	b634a <__aeabi_l2d+0x16>

000b6334 <__aeabi_l2d>:
   b6334:	ea50 0201 	orrs.w	r2, r0, r1
   b6338:	bf08      	it	eq
   b633a:	4770      	bxeq	lr
   b633c:	b530      	push	{r4, r5, lr}
   b633e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6342:	d502      	bpl.n	b634a <__aeabi_l2d+0x16>
   b6344:	4240      	negs	r0, r0
   b6346:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b634a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b634e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6352:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6356:	f43f aed8 	beq.w	b610a <__adddf3+0xe6>
   b635a:	f04f 0203 	mov.w	r2, #3
   b635e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6362:	bf18      	it	ne
   b6364:	3203      	addne	r2, #3
   b6366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b636a:	bf18      	it	ne
   b636c:	3203      	addne	r2, #3
   b636e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6372:	f1c2 0320 	rsb	r3, r2, #32
   b6376:	fa00 fc03 	lsl.w	ip, r0, r3
   b637a:	fa20 f002 	lsr.w	r0, r0, r2
   b637e:	fa01 fe03 	lsl.w	lr, r1, r3
   b6382:	ea40 000e 	orr.w	r0, r0, lr
   b6386:	fa21 f102 	lsr.w	r1, r1, r2
   b638a:	4414      	add	r4, r2
   b638c:	e6bd      	b.n	b610a <__adddf3+0xe6>
   b638e:	bf00      	nop

000b6390 <__aeabi_dmul>:
   b6390:	b570      	push	{r4, r5, r6, lr}
   b6392:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6396:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b639a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b639e:	bf1d      	ittte	ne
   b63a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b63a4:	ea94 0f0c 	teqne	r4, ip
   b63a8:	ea95 0f0c 	teqne	r5, ip
   b63ac:	f000 f8de 	bleq	b656c <__aeabi_dmul+0x1dc>
   b63b0:	442c      	add	r4, r5
   b63b2:	ea81 0603 	eor.w	r6, r1, r3
   b63b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b63ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b63be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b63c2:	bf18      	it	ne
   b63c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b63c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b63cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b63d0:	d038      	beq.n	b6444 <__aeabi_dmul+0xb4>
   b63d2:	fba0 ce02 	umull	ip, lr, r0, r2
   b63d6:	f04f 0500 	mov.w	r5, #0
   b63da:	fbe1 e502 	umlal	lr, r5, r1, r2
   b63de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b63e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b63e6:	f04f 0600 	mov.w	r6, #0
   b63ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   b63ee:	f09c 0f00 	teq	ip, #0
   b63f2:	bf18      	it	ne
   b63f4:	f04e 0e01 	orrne.w	lr, lr, #1
   b63f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b63fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6400:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6404:	d204      	bcs.n	b6410 <__aeabi_dmul+0x80>
   b6406:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b640a:	416d      	adcs	r5, r5
   b640c:	eb46 0606 	adc.w	r6, r6, r6
   b6410:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6414:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6418:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b641c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6420:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6424:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6428:	bf88      	it	hi
   b642a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b642e:	d81e      	bhi.n	b646e <__aeabi_dmul+0xde>
   b6430:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6434:	bf08      	it	eq
   b6436:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b643a:	f150 0000 	adcs.w	r0, r0, #0
   b643e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6442:	bd70      	pop	{r4, r5, r6, pc}
   b6444:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6448:	ea46 0101 	orr.w	r1, r6, r1
   b644c:	ea40 0002 	orr.w	r0, r0, r2
   b6450:	ea81 0103 	eor.w	r1, r1, r3
   b6454:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6458:	bfc2      	ittt	gt
   b645a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b645e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6462:	bd70      	popgt	{r4, r5, r6, pc}
   b6464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6468:	f04f 0e00 	mov.w	lr, #0
   b646c:	3c01      	subs	r4, #1
   b646e:	f300 80ab 	bgt.w	b65c8 <__aeabi_dmul+0x238>
   b6472:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6476:	bfde      	ittt	le
   b6478:	2000      	movle	r0, #0
   b647a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b647e:	bd70      	pople	{r4, r5, r6, pc}
   b6480:	f1c4 0400 	rsb	r4, r4, #0
   b6484:	3c20      	subs	r4, #32
   b6486:	da35      	bge.n	b64f4 <__aeabi_dmul+0x164>
   b6488:	340c      	adds	r4, #12
   b648a:	dc1b      	bgt.n	b64c4 <__aeabi_dmul+0x134>
   b648c:	f104 0414 	add.w	r4, r4, #20
   b6490:	f1c4 0520 	rsb	r5, r4, #32
   b6494:	fa00 f305 	lsl.w	r3, r0, r5
   b6498:	fa20 f004 	lsr.w	r0, r0, r4
   b649c:	fa01 f205 	lsl.w	r2, r1, r5
   b64a0:	ea40 0002 	orr.w	r0, r0, r2
   b64a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b64a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b64ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b64b0:	fa21 f604 	lsr.w	r6, r1, r4
   b64b4:	eb42 0106 	adc.w	r1, r2, r6
   b64b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b64bc:	bf08      	it	eq
   b64be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b64c2:	bd70      	pop	{r4, r5, r6, pc}
   b64c4:	f1c4 040c 	rsb	r4, r4, #12
   b64c8:	f1c4 0520 	rsb	r5, r4, #32
   b64cc:	fa00 f304 	lsl.w	r3, r0, r4
   b64d0:	fa20 f005 	lsr.w	r0, r0, r5
   b64d4:	fa01 f204 	lsl.w	r2, r1, r4
   b64d8:	ea40 0002 	orr.w	r0, r0, r2
   b64dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b64e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b64e4:	f141 0100 	adc.w	r1, r1, #0
   b64e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b64ec:	bf08      	it	eq
   b64ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b64f2:	bd70      	pop	{r4, r5, r6, pc}
   b64f4:	f1c4 0520 	rsb	r5, r4, #32
   b64f8:	fa00 f205 	lsl.w	r2, r0, r5
   b64fc:	ea4e 0e02 	orr.w	lr, lr, r2
   b6500:	fa20 f304 	lsr.w	r3, r0, r4
   b6504:	fa01 f205 	lsl.w	r2, r1, r5
   b6508:	ea43 0302 	orr.w	r3, r3, r2
   b650c:	fa21 f004 	lsr.w	r0, r1, r4
   b6510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6514:	fa21 f204 	lsr.w	r2, r1, r4
   b6518:	ea20 0002 	bic.w	r0, r0, r2
   b651c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6524:	bf08      	it	eq
   b6526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b652a:	bd70      	pop	{r4, r5, r6, pc}
   b652c:	f094 0f00 	teq	r4, #0
   b6530:	d10f      	bne.n	b6552 <__aeabi_dmul+0x1c2>
   b6532:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6536:	0040      	lsls	r0, r0, #1
   b6538:	eb41 0101 	adc.w	r1, r1, r1
   b653c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6540:	bf08      	it	eq
   b6542:	3c01      	subeq	r4, #1
   b6544:	d0f7      	beq.n	b6536 <__aeabi_dmul+0x1a6>
   b6546:	ea41 0106 	orr.w	r1, r1, r6
   b654a:	f095 0f00 	teq	r5, #0
   b654e:	bf18      	it	ne
   b6550:	4770      	bxne	lr
   b6552:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6556:	0052      	lsls	r2, r2, #1
   b6558:	eb43 0303 	adc.w	r3, r3, r3
   b655c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6560:	bf08      	it	eq
   b6562:	3d01      	subeq	r5, #1
   b6564:	d0f7      	beq.n	b6556 <__aeabi_dmul+0x1c6>
   b6566:	ea43 0306 	orr.w	r3, r3, r6
   b656a:	4770      	bx	lr
   b656c:	ea94 0f0c 	teq	r4, ip
   b6570:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6574:	bf18      	it	ne
   b6576:	ea95 0f0c 	teqne	r5, ip
   b657a:	d00c      	beq.n	b6596 <__aeabi_dmul+0x206>
   b657c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6580:	bf18      	it	ne
   b6582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6586:	d1d1      	bne.n	b652c <__aeabi_dmul+0x19c>
   b6588:	ea81 0103 	eor.w	r1, r1, r3
   b658c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6590:	f04f 0000 	mov.w	r0, #0
   b6594:	bd70      	pop	{r4, r5, r6, pc}
   b6596:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b659a:	bf06      	itte	eq
   b659c:	4610      	moveq	r0, r2
   b659e:	4619      	moveq	r1, r3
   b65a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b65a4:	d019      	beq.n	b65da <__aeabi_dmul+0x24a>
   b65a6:	ea94 0f0c 	teq	r4, ip
   b65aa:	d102      	bne.n	b65b2 <__aeabi_dmul+0x222>
   b65ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b65b0:	d113      	bne.n	b65da <__aeabi_dmul+0x24a>
   b65b2:	ea95 0f0c 	teq	r5, ip
   b65b6:	d105      	bne.n	b65c4 <__aeabi_dmul+0x234>
   b65b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b65bc:	bf1c      	itt	ne
   b65be:	4610      	movne	r0, r2
   b65c0:	4619      	movne	r1, r3
   b65c2:	d10a      	bne.n	b65da <__aeabi_dmul+0x24a>
   b65c4:	ea81 0103 	eor.w	r1, r1, r3
   b65c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b65cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b65d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b65d4:	f04f 0000 	mov.w	r0, #0
   b65d8:	bd70      	pop	{r4, r5, r6, pc}
   b65da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b65de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b65e2:	bd70      	pop	{r4, r5, r6, pc}

000b65e4 <__aeabi_ddiv>:
   b65e4:	b570      	push	{r4, r5, r6, lr}
   b65e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b65ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b65ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b65f2:	bf1d      	ittte	ne
   b65f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b65f8:	ea94 0f0c 	teqne	r4, ip
   b65fc:	ea95 0f0c 	teqne	r5, ip
   b6600:	f000 f8a7 	bleq	b6752 <__aeabi_ddiv+0x16e>
   b6604:	eba4 0405 	sub.w	r4, r4, r5
   b6608:	ea81 0e03 	eor.w	lr, r1, r3
   b660c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6610:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6614:	f000 8088 	beq.w	b6728 <__aeabi_ddiv+0x144>
   b6618:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b661c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6620:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6624:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6628:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b662c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6630:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6634:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6638:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b663c:	429d      	cmp	r5, r3
   b663e:	bf08      	it	eq
   b6640:	4296      	cmpeq	r6, r2
   b6642:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6646:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b664a:	d202      	bcs.n	b6652 <__aeabi_ddiv+0x6e>
   b664c:	085b      	lsrs	r3, r3, #1
   b664e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6652:	1ab6      	subs	r6, r6, r2
   b6654:	eb65 0503 	sbc.w	r5, r5, r3
   b6658:	085b      	lsrs	r3, r3, #1
   b665a:	ea4f 0232 	mov.w	r2, r2, rrx
   b665e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6662:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6666:	ebb6 0e02 	subs.w	lr, r6, r2
   b666a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b666e:	bf22      	ittt	cs
   b6670:	1ab6      	subcs	r6, r6, r2
   b6672:	4675      	movcs	r5, lr
   b6674:	ea40 000c 	orrcs.w	r0, r0, ip
   b6678:	085b      	lsrs	r3, r3, #1
   b667a:	ea4f 0232 	mov.w	r2, r2, rrx
   b667e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6682:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6686:	bf22      	ittt	cs
   b6688:	1ab6      	subcs	r6, r6, r2
   b668a:	4675      	movcs	r5, lr
   b668c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6690:	085b      	lsrs	r3, r3, #1
   b6692:	ea4f 0232 	mov.w	r2, r2, rrx
   b6696:	ebb6 0e02 	subs.w	lr, r6, r2
   b669a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b669e:	bf22      	ittt	cs
   b66a0:	1ab6      	subcs	r6, r6, r2
   b66a2:	4675      	movcs	r5, lr
   b66a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b66a8:	085b      	lsrs	r3, r3, #1
   b66aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b66ae:	ebb6 0e02 	subs.w	lr, r6, r2
   b66b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b66b6:	bf22      	ittt	cs
   b66b8:	1ab6      	subcs	r6, r6, r2
   b66ba:	4675      	movcs	r5, lr
   b66bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b66c0:	ea55 0e06 	orrs.w	lr, r5, r6
   b66c4:	d018      	beq.n	b66f8 <__aeabi_ddiv+0x114>
   b66c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b66ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b66ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b66d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b66d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b66da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b66de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b66e2:	d1c0      	bne.n	b6666 <__aeabi_ddiv+0x82>
   b66e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b66e8:	d10b      	bne.n	b6702 <__aeabi_ddiv+0x11e>
   b66ea:	ea41 0100 	orr.w	r1, r1, r0
   b66ee:	f04f 0000 	mov.w	r0, #0
   b66f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b66f6:	e7b6      	b.n	b6666 <__aeabi_ddiv+0x82>
   b66f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b66fc:	bf04      	itt	eq
   b66fe:	4301      	orreq	r1, r0
   b6700:	2000      	moveq	r0, #0
   b6702:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6706:	bf88      	it	hi
   b6708:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b670c:	f63f aeaf 	bhi.w	b646e <__aeabi_dmul+0xde>
   b6710:	ebb5 0c03 	subs.w	ip, r5, r3
   b6714:	bf04      	itt	eq
   b6716:	ebb6 0c02 	subseq.w	ip, r6, r2
   b671a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b671e:	f150 0000 	adcs.w	r0, r0, #0
   b6722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6726:	bd70      	pop	{r4, r5, r6, pc}
   b6728:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b672c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6730:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6734:	bfc2      	ittt	gt
   b6736:	ebd4 050c 	rsbsgt	r5, r4, ip
   b673a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b673e:	bd70      	popgt	{r4, r5, r6, pc}
   b6740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6744:	f04f 0e00 	mov.w	lr, #0
   b6748:	3c01      	subs	r4, #1
   b674a:	e690      	b.n	b646e <__aeabi_dmul+0xde>
   b674c:	ea45 0e06 	orr.w	lr, r5, r6
   b6750:	e68d      	b.n	b646e <__aeabi_dmul+0xde>
   b6752:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6756:	ea94 0f0c 	teq	r4, ip
   b675a:	bf08      	it	eq
   b675c:	ea95 0f0c 	teqeq	r5, ip
   b6760:	f43f af3b 	beq.w	b65da <__aeabi_dmul+0x24a>
   b6764:	ea94 0f0c 	teq	r4, ip
   b6768:	d10a      	bne.n	b6780 <__aeabi_ddiv+0x19c>
   b676a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b676e:	f47f af34 	bne.w	b65da <__aeabi_dmul+0x24a>
   b6772:	ea95 0f0c 	teq	r5, ip
   b6776:	f47f af25 	bne.w	b65c4 <__aeabi_dmul+0x234>
   b677a:	4610      	mov	r0, r2
   b677c:	4619      	mov	r1, r3
   b677e:	e72c      	b.n	b65da <__aeabi_dmul+0x24a>
   b6780:	ea95 0f0c 	teq	r5, ip
   b6784:	d106      	bne.n	b6794 <__aeabi_ddiv+0x1b0>
   b6786:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b678a:	f43f aefd 	beq.w	b6588 <__aeabi_dmul+0x1f8>
   b678e:	4610      	mov	r0, r2
   b6790:	4619      	mov	r1, r3
   b6792:	e722      	b.n	b65da <__aeabi_dmul+0x24a>
   b6794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6798:	bf18      	it	ne
   b679a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b679e:	f47f aec5 	bne.w	b652c <__aeabi_dmul+0x19c>
   b67a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b67a6:	f47f af0d 	bne.w	b65c4 <__aeabi_dmul+0x234>
   b67aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b67ae:	f47f aeeb 	bne.w	b6588 <__aeabi_dmul+0x1f8>
   b67b2:	e712      	b.n	b65da <__aeabi_dmul+0x24a>

000b67b4 <__gedf2>:
   b67b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b67b8:	e006      	b.n	b67c8 <__cmpdf2+0x4>
   b67ba:	bf00      	nop

000b67bc <__ledf2>:
   b67bc:	f04f 0c01 	mov.w	ip, #1
   b67c0:	e002      	b.n	b67c8 <__cmpdf2+0x4>
   b67c2:	bf00      	nop

000b67c4 <__cmpdf2>:
   b67c4:	f04f 0c01 	mov.w	ip, #1
   b67c8:	f84d cd04 	str.w	ip, [sp, #-4]!
   b67cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b67d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b67d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b67d8:	bf18      	it	ne
   b67da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b67de:	d01b      	beq.n	b6818 <__cmpdf2+0x54>
   b67e0:	b001      	add	sp, #4
   b67e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b67e6:	bf0c      	ite	eq
   b67e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b67ec:	ea91 0f03 	teqne	r1, r3
   b67f0:	bf02      	ittt	eq
   b67f2:	ea90 0f02 	teqeq	r0, r2
   b67f6:	2000      	moveq	r0, #0
   b67f8:	4770      	bxeq	lr
   b67fa:	f110 0f00 	cmn.w	r0, #0
   b67fe:	ea91 0f03 	teq	r1, r3
   b6802:	bf58      	it	pl
   b6804:	4299      	cmppl	r1, r3
   b6806:	bf08      	it	eq
   b6808:	4290      	cmpeq	r0, r2
   b680a:	bf2c      	ite	cs
   b680c:	17d8      	asrcs	r0, r3, #31
   b680e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6812:	f040 0001 	orr.w	r0, r0, #1
   b6816:	4770      	bx	lr
   b6818:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b681c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6820:	d102      	bne.n	b6828 <__cmpdf2+0x64>
   b6822:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6826:	d107      	bne.n	b6838 <__cmpdf2+0x74>
   b6828:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b682c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6830:	d1d6      	bne.n	b67e0 <__cmpdf2+0x1c>
   b6832:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6836:	d0d3      	beq.n	b67e0 <__cmpdf2+0x1c>
   b6838:	f85d 0b04 	ldr.w	r0, [sp], #4
   b683c:	4770      	bx	lr
   b683e:	bf00      	nop

000b6840 <__aeabi_cdrcmple>:
   b6840:	4684      	mov	ip, r0
   b6842:	4610      	mov	r0, r2
   b6844:	4662      	mov	r2, ip
   b6846:	468c      	mov	ip, r1
   b6848:	4619      	mov	r1, r3
   b684a:	4663      	mov	r3, ip
   b684c:	e000      	b.n	b6850 <__aeabi_cdcmpeq>
   b684e:	bf00      	nop

000b6850 <__aeabi_cdcmpeq>:
   b6850:	b501      	push	{r0, lr}
   b6852:	f7ff ffb7 	bl	b67c4 <__cmpdf2>
   b6856:	2800      	cmp	r0, #0
   b6858:	bf48      	it	mi
   b685a:	f110 0f00 	cmnmi.w	r0, #0
   b685e:	bd01      	pop	{r0, pc}

000b6860 <__aeabi_dcmpeq>:
   b6860:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6864:	f7ff fff4 	bl	b6850 <__aeabi_cdcmpeq>
   b6868:	bf0c      	ite	eq
   b686a:	2001      	moveq	r0, #1
   b686c:	2000      	movne	r0, #0
   b686e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6872:	bf00      	nop

000b6874 <__aeabi_dcmplt>:
   b6874:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6878:	f7ff ffea 	bl	b6850 <__aeabi_cdcmpeq>
   b687c:	bf34      	ite	cc
   b687e:	2001      	movcc	r0, #1
   b6880:	2000      	movcs	r0, #0
   b6882:	f85d fb08 	ldr.w	pc, [sp], #8
   b6886:	bf00      	nop

000b6888 <__aeabi_dcmple>:
   b6888:	f84d ed08 	str.w	lr, [sp, #-8]!
   b688c:	f7ff ffe0 	bl	b6850 <__aeabi_cdcmpeq>
   b6890:	bf94      	ite	ls
   b6892:	2001      	movls	r0, #1
   b6894:	2000      	movhi	r0, #0
   b6896:	f85d fb08 	ldr.w	pc, [sp], #8
   b689a:	bf00      	nop

000b689c <__aeabi_dcmpge>:
   b689c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b68a0:	f7ff ffce 	bl	b6840 <__aeabi_cdrcmple>
   b68a4:	bf94      	ite	ls
   b68a6:	2001      	movls	r0, #1
   b68a8:	2000      	movhi	r0, #0
   b68aa:	f85d fb08 	ldr.w	pc, [sp], #8
   b68ae:	bf00      	nop

000b68b0 <__aeabi_dcmpgt>:
   b68b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b68b4:	f7ff ffc4 	bl	b6840 <__aeabi_cdrcmple>
   b68b8:	bf34      	ite	cc
   b68ba:	2001      	movcc	r0, #1
   b68bc:	2000      	movcs	r0, #0
   b68be:	f85d fb08 	ldr.w	pc, [sp], #8
   b68c2:	bf00      	nop

000b68c4 <__aeabi_dcmpun>:
   b68c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b68c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b68cc:	d102      	bne.n	b68d4 <__aeabi_dcmpun+0x10>
   b68ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b68d2:	d10a      	bne.n	b68ea <__aeabi_dcmpun+0x26>
   b68d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b68d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b68dc:	d102      	bne.n	b68e4 <__aeabi_dcmpun+0x20>
   b68de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b68e2:	d102      	bne.n	b68ea <__aeabi_dcmpun+0x26>
   b68e4:	f04f 0000 	mov.w	r0, #0
   b68e8:	4770      	bx	lr
   b68ea:	f04f 0001 	mov.w	r0, #1
   b68ee:	4770      	bx	lr

000b68f0 <__aeabi_d2iz>:
   b68f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b68f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b68f8:	d215      	bcs.n	b6926 <__aeabi_d2iz+0x36>
   b68fa:	d511      	bpl.n	b6920 <__aeabi_d2iz+0x30>
   b68fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6900:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6904:	d912      	bls.n	b692c <__aeabi_d2iz+0x3c>
   b6906:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b690a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b690e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6912:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6916:	fa23 f002 	lsr.w	r0, r3, r2
   b691a:	bf18      	it	ne
   b691c:	4240      	negne	r0, r0
   b691e:	4770      	bx	lr
   b6920:	f04f 0000 	mov.w	r0, #0
   b6924:	4770      	bx	lr
   b6926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b692a:	d105      	bne.n	b6938 <__aeabi_d2iz+0x48>
   b692c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6930:	bf08      	it	eq
   b6932:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6936:	4770      	bx	lr
   b6938:	f04f 0000 	mov.w	r0, #0
   b693c:	4770      	bx	lr
   b693e:	bf00      	nop

000b6940 <__aeabi_d2uiz>:
   b6940:	004a      	lsls	r2, r1, #1
   b6942:	d211      	bcs.n	b6968 <__aeabi_d2uiz+0x28>
   b6944:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6948:	d211      	bcs.n	b696e <__aeabi_d2uiz+0x2e>
   b694a:	d50d      	bpl.n	b6968 <__aeabi_d2uiz+0x28>
   b694c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6950:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6954:	d40e      	bmi.n	b6974 <__aeabi_d2uiz+0x34>
   b6956:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b695a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b695e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6962:	fa23 f002 	lsr.w	r0, r3, r2
   b6966:	4770      	bx	lr
   b6968:	f04f 0000 	mov.w	r0, #0
   b696c:	4770      	bx	lr
   b696e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6972:	d102      	bne.n	b697a <__aeabi_d2uiz+0x3a>
   b6974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6978:	4770      	bx	lr
   b697a:	f04f 0000 	mov.w	r0, #0
   b697e:	4770      	bx	lr

000b6980 <__aeabi_d2f>:
   b6980:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6984:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6988:	bf24      	itt	cs
   b698a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b698e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6992:	d90d      	bls.n	b69b0 <__aeabi_d2f+0x30>
   b6994:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6998:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b699c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b69a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b69a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b69a8:	bf08      	it	eq
   b69aa:	f020 0001 	biceq.w	r0, r0, #1
   b69ae:	4770      	bx	lr
   b69b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b69b4:	d121      	bne.n	b69fa <__aeabi_d2f+0x7a>
   b69b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b69ba:	bfbc      	itt	lt
   b69bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b69c0:	4770      	bxlt	lr
   b69c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b69c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b69ca:	f1c2 0218 	rsb	r2, r2, #24
   b69ce:	f1c2 0c20 	rsb	ip, r2, #32
   b69d2:	fa10 f30c 	lsls.w	r3, r0, ip
   b69d6:	fa20 f002 	lsr.w	r0, r0, r2
   b69da:	bf18      	it	ne
   b69dc:	f040 0001 	orrne.w	r0, r0, #1
   b69e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b69e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b69e8:	fa03 fc0c 	lsl.w	ip, r3, ip
   b69ec:	ea40 000c 	orr.w	r0, r0, ip
   b69f0:	fa23 f302 	lsr.w	r3, r3, r2
   b69f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b69f8:	e7cc      	b.n	b6994 <__aeabi_d2f+0x14>
   b69fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b69fe:	d107      	bne.n	b6a10 <__aeabi_d2f+0x90>
   b6a00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6a04:	bf1e      	ittt	ne
   b6a06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6a0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6a0e:	4770      	bxne	lr
   b6a10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6a14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6a18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6a1c:	4770      	bx	lr
   b6a1e:	bf00      	nop

000b6a20 <__aeabi_uldivmod>:
   b6a20:	b953      	cbnz	r3, b6a38 <__aeabi_uldivmod+0x18>
   b6a22:	b94a      	cbnz	r2, b6a38 <__aeabi_uldivmod+0x18>
   b6a24:	2900      	cmp	r1, #0
   b6a26:	bf08      	it	eq
   b6a28:	2800      	cmpeq	r0, #0
   b6a2a:	bf1c      	itt	ne
   b6a2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6a30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b6a34:	f000 b992 	b.w	b6d5c <__aeabi_idiv0>
   b6a38:	f1ad 0c08 	sub.w	ip, sp, #8
   b6a3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b6a40:	f000 f824 	bl	b6a8c <__udivmoddi4>
   b6a44:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6a4c:	b004      	add	sp, #16
   b6a4e:	4770      	bx	lr

000b6a50 <__aeabi_d2ulz>:
   b6a50:	b5d0      	push	{r4, r6, r7, lr}
   b6a52:	4b0c      	ldr	r3, [pc, #48]	; (b6a84 <__aeabi_d2ulz+0x34>)
   b6a54:	2200      	movs	r2, #0
   b6a56:	4606      	mov	r6, r0
   b6a58:	460f      	mov	r7, r1
   b6a5a:	f7ff fc99 	bl	b6390 <__aeabi_dmul>
   b6a5e:	f7ff ff6f 	bl	b6940 <__aeabi_d2uiz>
   b6a62:	4604      	mov	r4, r0
   b6a64:	f7ff fc1a 	bl	b629c <__aeabi_ui2d>
   b6a68:	4b07      	ldr	r3, [pc, #28]	; (b6a88 <__aeabi_d2ulz+0x38>)
   b6a6a:	2200      	movs	r2, #0
   b6a6c:	f7ff fc90 	bl	b6390 <__aeabi_dmul>
   b6a70:	4602      	mov	r2, r0
   b6a72:	460b      	mov	r3, r1
   b6a74:	4630      	mov	r0, r6
   b6a76:	4639      	mov	r1, r7
   b6a78:	f7ff fad2 	bl	b6020 <__aeabi_dsub>
   b6a7c:	f7ff ff60 	bl	b6940 <__aeabi_d2uiz>
   b6a80:	4621      	mov	r1, r4
   b6a82:	bdd0      	pop	{r4, r6, r7, pc}
   b6a84:	3df00000 	.word	0x3df00000
   b6a88:	41f00000 	.word	0x41f00000

000b6a8c <__udivmoddi4>:
   b6a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a90:	9d08      	ldr	r5, [sp, #32]
   b6a92:	4604      	mov	r4, r0
   b6a94:	468e      	mov	lr, r1
   b6a96:	2b00      	cmp	r3, #0
   b6a98:	d14d      	bne.n	b6b36 <__udivmoddi4+0xaa>
   b6a9a:	428a      	cmp	r2, r1
   b6a9c:	4694      	mov	ip, r2
   b6a9e:	d969      	bls.n	b6b74 <__udivmoddi4+0xe8>
   b6aa0:	fab2 f282 	clz	r2, r2
   b6aa4:	b152      	cbz	r2, b6abc <__udivmoddi4+0x30>
   b6aa6:	fa01 f302 	lsl.w	r3, r1, r2
   b6aaa:	f1c2 0120 	rsb	r1, r2, #32
   b6aae:	fa20 f101 	lsr.w	r1, r0, r1
   b6ab2:	fa0c fc02 	lsl.w	ip, ip, r2
   b6ab6:	ea41 0e03 	orr.w	lr, r1, r3
   b6aba:	4094      	lsls	r4, r2
   b6abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b6ac0:	0c21      	lsrs	r1, r4, #16
   b6ac2:	fbbe f6f8 	udiv	r6, lr, r8
   b6ac6:	fa1f f78c 	uxth.w	r7, ip
   b6aca:	fb08 e316 	mls	r3, r8, r6, lr
   b6ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b6ad2:	fb06 f107 	mul.w	r1, r6, r7
   b6ad6:	4299      	cmp	r1, r3
   b6ad8:	d90a      	bls.n	b6af0 <__udivmoddi4+0x64>
   b6ada:	eb1c 0303 	adds.w	r3, ip, r3
   b6ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b6ae2:	f080 811f 	bcs.w	b6d24 <__udivmoddi4+0x298>
   b6ae6:	4299      	cmp	r1, r3
   b6ae8:	f240 811c 	bls.w	b6d24 <__udivmoddi4+0x298>
   b6aec:	3e02      	subs	r6, #2
   b6aee:	4463      	add	r3, ip
   b6af0:	1a5b      	subs	r3, r3, r1
   b6af2:	b2a4      	uxth	r4, r4
   b6af4:	fbb3 f0f8 	udiv	r0, r3, r8
   b6af8:	fb08 3310 	mls	r3, r8, r0, r3
   b6afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b6b00:	fb00 f707 	mul.w	r7, r0, r7
   b6b04:	42a7      	cmp	r7, r4
   b6b06:	d90a      	bls.n	b6b1e <__udivmoddi4+0x92>
   b6b08:	eb1c 0404 	adds.w	r4, ip, r4
   b6b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6b10:	f080 810a 	bcs.w	b6d28 <__udivmoddi4+0x29c>
   b6b14:	42a7      	cmp	r7, r4
   b6b16:	f240 8107 	bls.w	b6d28 <__udivmoddi4+0x29c>
   b6b1a:	4464      	add	r4, ip
   b6b1c:	3802      	subs	r0, #2
   b6b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b6b22:	1be4      	subs	r4, r4, r7
   b6b24:	2600      	movs	r6, #0
   b6b26:	b11d      	cbz	r5, b6b30 <__udivmoddi4+0xa4>
   b6b28:	40d4      	lsrs	r4, r2
   b6b2a:	2300      	movs	r3, #0
   b6b2c:	e9c5 4300 	strd	r4, r3, [r5]
   b6b30:	4631      	mov	r1, r6
   b6b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6b36:	428b      	cmp	r3, r1
   b6b38:	d909      	bls.n	b6b4e <__udivmoddi4+0xc2>
   b6b3a:	2d00      	cmp	r5, #0
   b6b3c:	f000 80ef 	beq.w	b6d1e <__udivmoddi4+0x292>
   b6b40:	2600      	movs	r6, #0
   b6b42:	e9c5 0100 	strd	r0, r1, [r5]
   b6b46:	4630      	mov	r0, r6
   b6b48:	4631      	mov	r1, r6
   b6b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6b4e:	fab3 f683 	clz	r6, r3
   b6b52:	2e00      	cmp	r6, #0
   b6b54:	d14a      	bne.n	b6bec <__udivmoddi4+0x160>
   b6b56:	428b      	cmp	r3, r1
   b6b58:	d302      	bcc.n	b6b60 <__udivmoddi4+0xd4>
   b6b5a:	4282      	cmp	r2, r0
   b6b5c:	f200 80f9 	bhi.w	b6d52 <__udivmoddi4+0x2c6>
   b6b60:	1a84      	subs	r4, r0, r2
   b6b62:	eb61 0303 	sbc.w	r3, r1, r3
   b6b66:	2001      	movs	r0, #1
   b6b68:	469e      	mov	lr, r3
   b6b6a:	2d00      	cmp	r5, #0
   b6b6c:	d0e0      	beq.n	b6b30 <__udivmoddi4+0xa4>
   b6b6e:	e9c5 4e00 	strd	r4, lr, [r5]
   b6b72:	e7dd      	b.n	b6b30 <__udivmoddi4+0xa4>
   b6b74:	b902      	cbnz	r2, b6b78 <__udivmoddi4+0xec>
   b6b76:	deff      	udf	#255	; 0xff
   b6b78:	fab2 f282 	clz	r2, r2
   b6b7c:	2a00      	cmp	r2, #0
   b6b7e:	f040 8092 	bne.w	b6ca6 <__udivmoddi4+0x21a>
   b6b82:	eba1 010c 	sub.w	r1, r1, ip
   b6b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b6b8a:	fa1f fe8c 	uxth.w	lr, ip
   b6b8e:	2601      	movs	r6, #1
   b6b90:	0c20      	lsrs	r0, r4, #16
   b6b92:	fbb1 f3f7 	udiv	r3, r1, r7
   b6b96:	fb07 1113 	mls	r1, r7, r3, r1
   b6b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6b9e:	fb0e f003 	mul.w	r0, lr, r3
   b6ba2:	4288      	cmp	r0, r1
   b6ba4:	d908      	bls.n	b6bb8 <__udivmoddi4+0x12c>
   b6ba6:	eb1c 0101 	adds.w	r1, ip, r1
   b6baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b6bae:	d202      	bcs.n	b6bb6 <__udivmoddi4+0x12a>
   b6bb0:	4288      	cmp	r0, r1
   b6bb2:	f200 80cb 	bhi.w	b6d4c <__udivmoddi4+0x2c0>
   b6bb6:	4643      	mov	r3, r8
   b6bb8:	1a09      	subs	r1, r1, r0
   b6bba:	b2a4      	uxth	r4, r4
   b6bbc:	fbb1 f0f7 	udiv	r0, r1, r7
   b6bc0:	fb07 1110 	mls	r1, r7, r0, r1
   b6bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b6bc8:	fb0e fe00 	mul.w	lr, lr, r0
   b6bcc:	45a6      	cmp	lr, r4
   b6bce:	d908      	bls.n	b6be2 <__udivmoddi4+0x156>
   b6bd0:	eb1c 0404 	adds.w	r4, ip, r4
   b6bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b6bd8:	d202      	bcs.n	b6be0 <__udivmoddi4+0x154>
   b6bda:	45a6      	cmp	lr, r4
   b6bdc:	f200 80bb 	bhi.w	b6d56 <__udivmoddi4+0x2ca>
   b6be0:	4608      	mov	r0, r1
   b6be2:	eba4 040e 	sub.w	r4, r4, lr
   b6be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b6bea:	e79c      	b.n	b6b26 <__udivmoddi4+0x9a>
   b6bec:	f1c6 0720 	rsb	r7, r6, #32
   b6bf0:	40b3      	lsls	r3, r6
   b6bf2:	fa22 fc07 	lsr.w	ip, r2, r7
   b6bf6:	ea4c 0c03 	orr.w	ip, ip, r3
   b6bfa:	fa20 f407 	lsr.w	r4, r0, r7
   b6bfe:	fa01 f306 	lsl.w	r3, r1, r6
   b6c02:	431c      	orrs	r4, r3
   b6c04:	40f9      	lsrs	r1, r7
   b6c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b6c0a:	fa00 f306 	lsl.w	r3, r0, r6
   b6c0e:	fbb1 f8f9 	udiv	r8, r1, r9
   b6c12:	0c20      	lsrs	r0, r4, #16
   b6c14:	fa1f fe8c 	uxth.w	lr, ip
   b6c18:	fb09 1118 	mls	r1, r9, r8, r1
   b6c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6c20:	fb08 f00e 	mul.w	r0, r8, lr
   b6c24:	4288      	cmp	r0, r1
   b6c26:	fa02 f206 	lsl.w	r2, r2, r6
   b6c2a:	d90b      	bls.n	b6c44 <__udivmoddi4+0x1b8>
   b6c2c:	eb1c 0101 	adds.w	r1, ip, r1
   b6c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b6c34:	f080 8088 	bcs.w	b6d48 <__udivmoddi4+0x2bc>
   b6c38:	4288      	cmp	r0, r1
   b6c3a:	f240 8085 	bls.w	b6d48 <__udivmoddi4+0x2bc>
   b6c3e:	f1a8 0802 	sub.w	r8, r8, #2
   b6c42:	4461      	add	r1, ip
   b6c44:	1a09      	subs	r1, r1, r0
   b6c46:	b2a4      	uxth	r4, r4
   b6c48:	fbb1 f0f9 	udiv	r0, r1, r9
   b6c4c:	fb09 1110 	mls	r1, r9, r0, r1
   b6c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b6c54:	fb00 fe0e 	mul.w	lr, r0, lr
   b6c58:	458e      	cmp	lr, r1
   b6c5a:	d908      	bls.n	b6c6e <__udivmoddi4+0x1e2>
   b6c5c:	eb1c 0101 	adds.w	r1, ip, r1
   b6c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b6c64:	d26c      	bcs.n	b6d40 <__udivmoddi4+0x2b4>
   b6c66:	458e      	cmp	lr, r1
   b6c68:	d96a      	bls.n	b6d40 <__udivmoddi4+0x2b4>
   b6c6a:	3802      	subs	r0, #2
   b6c6c:	4461      	add	r1, ip
   b6c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b6c72:	fba0 9402 	umull	r9, r4, r0, r2
   b6c76:	eba1 010e 	sub.w	r1, r1, lr
   b6c7a:	42a1      	cmp	r1, r4
   b6c7c:	46c8      	mov	r8, r9
   b6c7e:	46a6      	mov	lr, r4
   b6c80:	d356      	bcc.n	b6d30 <__udivmoddi4+0x2a4>
   b6c82:	d053      	beq.n	b6d2c <__udivmoddi4+0x2a0>
   b6c84:	b15d      	cbz	r5, b6c9e <__udivmoddi4+0x212>
   b6c86:	ebb3 0208 	subs.w	r2, r3, r8
   b6c8a:	eb61 010e 	sbc.w	r1, r1, lr
   b6c8e:	fa01 f707 	lsl.w	r7, r1, r7
   b6c92:	fa22 f306 	lsr.w	r3, r2, r6
   b6c96:	40f1      	lsrs	r1, r6
   b6c98:	431f      	orrs	r7, r3
   b6c9a:	e9c5 7100 	strd	r7, r1, [r5]
   b6c9e:	2600      	movs	r6, #0
   b6ca0:	4631      	mov	r1, r6
   b6ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ca6:	f1c2 0320 	rsb	r3, r2, #32
   b6caa:	40d8      	lsrs	r0, r3
   b6cac:	fa0c fc02 	lsl.w	ip, ip, r2
   b6cb0:	fa21 f303 	lsr.w	r3, r1, r3
   b6cb4:	4091      	lsls	r1, r2
   b6cb6:	4301      	orrs	r1, r0
   b6cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b6cbc:	fa1f fe8c 	uxth.w	lr, ip
   b6cc0:	fbb3 f0f7 	udiv	r0, r3, r7
   b6cc4:	fb07 3610 	mls	r6, r7, r0, r3
   b6cc8:	0c0b      	lsrs	r3, r1, #16
   b6cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b6cce:	fb00 f60e 	mul.w	r6, r0, lr
   b6cd2:	429e      	cmp	r6, r3
   b6cd4:	fa04 f402 	lsl.w	r4, r4, r2
   b6cd8:	d908      	bls.n	b6cec <__udivmoddi4+0x260>
   b6cda:	eb1c 0303 	adds.w	r3, ip, r3
   b6cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b6ce2:	d22f      	bcs.n	b6d44 <__udivmoddi4+0x2b8>
   b6ce4:	429e      	cmp	r6, r3
   b6ce6:	d92d      	bls.n	b6d44 <__udivmoddi4+0x2b8>
   b6ce8:	3802      	subs	r0, #2
   b6cea:	4463      	add	r3, ip
   b6cec:	1b9b      	subs	r3, r3, r6
   b6cee:	b289      	uxth	r1, r1
   b6cf0:	fbb3 f6f7 	udiv	r6, r3, r7
   b6cf4:	fb07 3316 	mls	r3, r7, r6, r3
   b6cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b6cfc:	fb06 f30e 	mul.w	r3, r6, lr
   b6d00:	428b      	cmp	r3, r1
   b6d02:	d908      	bls.n	b6d16 <__udivmoddi4+0x28a>
   b6d04:	eb1c 0101 	adds.w	r1, ip, r1
   b6d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b6d0c:	d216      	bcs.n	b6d3c <__udivmoddi4+0x2b0>
   b6d0e:	428b      	cmp	r3, r1
   b6d10:	d914      	bls.n	b6d3c <__udivmoddi4+0x2b0>
   b6d12:	3e02      	subs	r6, #2
   b6d14:	4461      	add	r1, ip
   b6d16:	1ac9      	subs	r1, r1, r3
   b6d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b6d1c:	e738      	b.n	b6b90 <__udivmoddi4+0x104>
   b6d1e:	462e      	mov	r6, r5
   b6d20:	4628      	mov	r0, r5
   b6d22:	e705      	b.n	b6b30 <__udivmoddi4+0xa4>
   b6d24:	4606      	mov	r6, r0
   b6d26:	e6e3      	b.n	b6af0 <__udivmoddi4+0x64>
   b6d28:	4618      	mov	r0, r3
   b6d2a:	e6f8      	b.n	b6b1e <__udivmoddi4+0x92>
   b6d2c:	454b      	cmp	r3, r9
   b6d2e:	d2a9      	bcs.n	b6c84 <__udivmoddi4+0x1f8>
   b6d30:	ebb9 0802 	subs.w	r8, r9, r2
   b6d34:	eb64 0e0c 	sbc.w	lr, r4, ip
   b6d38:	3801      	subs	r0, #1
   b6d3a:	e7a3      	b.n	b6c84 <__udivmoddi4+0x1f8>
   b6d3c:	4646      	mov	r6, r8
   b6d3e:	e7ea      	b.n	b6d16 <__udivmoddi4+0x28a>
   b6d40:	4620      	mov	r0, r4
   b6d42:	e794      	b.n	b6c6e <__udivmoddi4+0x1e2>
   b6d44:	4640      	mov	r0, r8
   b6d46:	e7d1      	b.n	b6cec <__udivmoddi4+0x260>
   b6d48:	46d0      	mov	r8, sl
   b6d4a:	e77b      	b.n	b6c44 <__udivmoddi4+0x1b8>
   b6d4c:	3b02      	subs	r3, #2
   b6d4e:	4461      	add	r1, ip
   b6d50:	e732      	b.n	b6bb8 <__udivmoddi4+0x12c>
   b6d52:	4630      	mov	r0, r6
   b6d54:	e709      	b.n	b6b6a <__udivmoddi4+0xde>
   b6d56:	4464      	add	r4, ip
   b6d58:	3802      	subs	r0, #2
   b6d5a:	e742      	b.n	b6be2 <__udivmoddi4+0x156>

000b6d5c <__aeabi_idiv0>:
   b6d5c:	4770      	bx	lr
   b6d5e:	bf00      	nop

000b6d60 <atexit>:
   b6d60:	2300      	movs	r3, #0
   b6d62:	4601      	mov	r1, r0
   b6d64:	461a      	mov	r2, r3
   b6d66:	4618      	mov	r0, r3
   b6d68:	f000 b86a 	b.w	b6e40 <__register_exitproc>

000b6d6c <memcpy>:
   b6d6c:	440a      	add	r2, r1
   b6d6e:	4291      	cmp	r1, r2
   b6d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6d74:	d100      	bne.n	b6d78 <memcpy+0xc>
   b6d76:	4770      	bx	lr
   b6d78:	b510      	push	{r4, lr}
   b6d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6d82:	4291      	cmp	r1, r2
   b6d84:	d1f9      	bne.n	b6d7a <memcpy+0xe>
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <memset>:
   b6d88:	4402      	add	r2, r0
   b6d8a:	4603      	mov	r3, r0
   b6d8c:	4293      	cmp	r3, r2
   b6d8e:	d100      	bne.n	b6d92 <memset+0xa>
   b6d90:	4770      	bx	lr
   b6d92:	f803 1b01 	strb.w	r1, [r3], #1
   b6d96:	e7f9      	b.n	b6d8c <memset+0x4>

000b6d98 <srand>:
   b6d98:	b538      	push	{r3, r4, r5, lr}
   b6d9a:	4b10      	ldr	r3, [pc, #64]	; (b6ddc <srand+0x44>)
   b6d9c:	681d      	ldr	r5, [r3, #0]
   b6d9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6da0:	4604      	mov	r4, r0
   b6da2:	b9b3      	cbnz	r3, b6dd2 <srand+0x3a>
   b6da4:	2018      	movs	r0, #24
   b6da6:	f7fd ff6b 	bl	b4c80 <malloc>
   b6daa:	4602      	mov	r2, r0
   b6dac:	63a8      	str	r0, [r5, #56]	; 0x38
   b6dae:	b920      	cbnz	r0, b6dba <srand+0x22>
   b6db0:	4b0b      	ldr	r3, [pc, #44]	; (b6de0 <srand+0x48>)
   b6db2:	480c      	ldr	r0, [pc, #48]	; (b6de4 <srand+0x4c>)
   b6db4:	2142      	movs	r1, #66	; 0x42
   b6db6:	f7fd ff8b 	bl	b4cd0 <__assert_func>
   b6dba:	490b      	ldr	r1, [pc, #44]	; (b6de8 <srand+0x50>)
   b6dbc:	4b0b      	ldr	r3, [pc, #44]	; (b6dec <srand+0x54>)
   b6dbe:	e9c0 1300 	strd	r1, r3, [r0]
   b6dc2:	4b0b      	ldr	r3, [pc, #44]	; (b6df0 <srand+0x58>)
   b6dc4:	6083      	str	r3, [r0, #8]
   b6dc6:	230b      	movs	r3, #11
   b6dc8:	8183      	strh	r3, [r0, #12]
   b6dca:	2100      	movs	r1, #0
   b6dcc:	2001      	movs	r0, #1
   b6dce:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6dd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6dd4:	2200      	movs	r2, #0
   b6dd6:	611c      	str	r4, [r3, #16]
   b6dd8:	615a      	str	r2, [r3, #20]
   b6dda:	bd38      	pop	{r3, r4, r5, pc}
   b6ddc:	2003e5b0 	.word	0x2003e5b0
   b6de0:	000b7189 	.word	0x000b7189
   b6de4:	000b71a0 	.word	0x000b71a0
   b6de8:	abcd330e 	.word	0xabcd330e
   b6dec:	e66d1234 	.word	0xe66d1234
   b6df0:	0005deec 	.word	0x0005deec

000b6df4 <strdup>:
   b6df4:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <strdup+0xc>)
   b6df6:	4601      	mov	r1, r0
   b6df8:	6818      	ldr	r0, [r3, #0]
   b6dfa:	f000 b803 	b.w	b6e04 <_strdup_r>
   b6dfe:	bf00      	nop
   b6e00:	2003e5b0 	.word	0x2003e5b0

000b6e04 <_strdup_r>:
   b6e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e06:	4604      	mov	r4, r0
   b6e08:	4608      	mov	r0, r1
   b6e0a:	460d      	mov	r5, r1
   b6e0c:	f000 f80f 	bl	b6e2e <strlen>
   b6e10:	1c42      	adds	r2, r0, #1
   b6e12:	4611      	mov	r1, r2
   b6e14:	4620      	mov	r0, r4
   b6e16:	9201      	str	r2, [sp, #4]
   b6e18:	f7fd ff52 	bl	b4cc0 <_malloc_r>
   b6e1c:	4604      	mov	r4, r0
   b6e1e:	b118      	cbz	r0, b6e28 <_strdup_r+0x24>
   b6e20:	9a01      	ldr	r2, [sp, #4]
   b6e22:	4629      	mov	r1, r5
   b6e24:	f7ff ffa2 	bl	b6d6c <memcpy>
   b6e28:	4620      	mov	r0, r4
   b6e2a:	b003      	add	sp, #12
   b6e2c:	bd30      	pop	{r4, r5, pc}

000b6e2e <strlen>:
   b6e2e:	4603      	mov	r3, r0
   b6e30:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6e34:	2a00      	cmp	r2, #0
   b6e36:	d1fb      	bne.n	b6e30 <strlen+0x2>
   b6e38:	1a18      	subs	r0, r3, r0
   b6e3a:	3801      	subs	r0, #1
   b6e3c:	4770      	bx	lr
	...

000b6e40 <__register_exitproc>:
   b6e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e44:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6f00 <__register_exitproc+0xc0>
   b6e48:	4606      	mov	r6, r0
   b6e4a:	f8d8 0000 	ldr.w	r0, [r8]
   b6e4e:	461f      	mov	r7, r3
   b6e50:	460d      	mov	r5, r1
   b6e52:	4691      	mov	r9, r2
   b6e54:	f000 f856 	bl	b6f04 <__retarget_lock_acquire_recursive>
   b6e58:	4b25      	ldr	r3, [pc, #148]	; (b6ef0 <__register_exitproc+0xb0>)
   b6e5a:	681c      	ldr	r4, [r3, #0]
   b6e5c:	b934      	cbnz	r4, b6e6c <__register_exitproc+0x2c>
   b6e5e:	4c25      	ldr	r4, [pc, #148]	; (b6ef4 <__register_exitproc+0xb4>)
   b6e60:	601c      	str	r4, [r3, #0]
   b6e62:	4b25      	ldr	r3, [pc, #148]	; (b6ef8 <__register_exitproc+0xb8>)
   b6e64:	b113      	cbz	r3, b6e6c <__register_exitproc+0x2c>
   b6e66:	681b      	ldr	r3, [r3, #0]
   b6e68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6e6c:	6863      	ldr	r3, [r4, #4]
   b6e6e:	2b1f      	cmp	r3, #31
   b6e70:	dd07      	ble.n	b6e82 <__register_exitproc+0x42>
   b6e72:	f8d8 0000 	ldr.w	r0, [r8]
   b6e76:	f000 f847 	bl	b6f08 <__retarget_lock_release_recursive>
   b6e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e82:	b34e      	cbz	r6, b6ed8 <__register_exitproc+0x98>
   b6e84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6e88:	b988      	cbnz	r0, b6eae <__register_exitproc+0x6e>
   b6e8a:	4b1c      	ldr	r3, [pc, #112]	; (b6efc <__register_exitproc+0xbc>)
   b6e8c:	b923      	cbnz	r3, b6e98 <__register_exitproc+0x58>
   b6e8e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e92:	f000 f838 	bl	b6f06 <__retarget_lock_release>
   b6e96:	e7f0      	b.n	b6e7a <__register_exitproc+0x3a>
   b6e98:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6e9c:	f7fd fef0 	bl	b4c80 <malloc>
   b6ea0:	2800      	cmp	r0, #0
   b6ea2:	d0f4      	beq.n	b6e8e <__register_exitproc+0x4e>
   b6ea4:	2300      	movs	r3, #0
   b6ea6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6eaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6eae:	6863      	ldr	r3, [r4, #4]
   b6eb0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6eb4:	2201      	movs	r2, #1
   b6eb6:	409a      	lsls	r2, r3
   b6eb8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6ebc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6ec0:	4313      	orrs	r3, r2
   b6ec2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6ec6:	2e02      	cmp	r6, #2
   b6ec8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6ecc:	bf02      	ittt	eq
   b6ece:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6ed2:	4313      	orreq	r3, r2
   b6ed4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6ed8:	6863      	ldr	r3, [r4, #4]
   b6eda:	f8d8 0000 	ldr.w	r0, [r8]
   b6ede:	1c5a      	adds	r2, r3, #1
   b6ee0:	3302      	adds	r3, #2
   b6ee2:	6062      	str	r2, [r4, #4]
   b6ee4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6ee8:	f000 f80e 	bl	b6f08 <__retarget_lock_release_recursive>
   b6eec:	2000      	movs	r0, #0
   b6eee:	e7c6      	b.n	b6e7e <__register_exitproc+0x3e>
   b6ef0:	2003e7e8 	.word	0x2003e7e8
   b6ef4:	2003e75c 	.word	0x2003e75c
   b6ef8:	00000000 	.word	0x00000000
   b6efc:	000b4c81 	.word	0x000b4c81
   b6f00:	2003e614 	.word	0x2003e614

000b6f04 <__retarget_lock_acquire_recursive>:
   b6f04:	4770      	bx	lr

000b6f06 <__retarget_lock_release>:
   b6f06:	4770      	bx	lr

000b6f08 <__retarget_lock_release_recursive>:
   b6f08:	4770      	bx	lr

000b6f0a <link_code_end>:
	...

000b6f0c <dynalib_user>:
   b6f0c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6f1c:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   b6f2c:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   b6f3c:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   b6f4c:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   b6f5c:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
   b6f6c:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
   b6f7c:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
   b6f8c:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
   b6f9c:	6572 002e 5249 003d 202c 5042 3d4d 2c00     re..IR=., BPM=.,
   b6fac:	4120 6776 4220 4d50 003d 6568 7261 7274      Avg BPM=.heartr
   b6fbc:	7461 0065 202c 7570 6c62 7369 6568 0064     ate., published.
   b6fcc:	4e20 206f 6966 676e 7265 003f                No finger?.

000b6fd8 <_ZL9FIRCoeffs>:
   b6fd8:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
   b6fe8:	0d3f 0eb8 0fac 1000                         ?.......

000b6ff0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6ff8:	4d9d 000b 4da3 000b 4de1 000b 4db1 000b     .M...M...M...M..
   b7008:	4d9f 000b                                   .M..

000b700c <_ZTVN5spark13EthernetClassE>:
	...
   b7014:	532b 000b 5321 000b 5317 000b 530d 000b     +S..!S...S...S..
   b7024:	5301 000b 52f5 000b 55a5 000b 55ad 000b     .S...R...U...U..
   b7034:	52e9 000b 52e1 000b 52d7 000b 52cd 000b     .R...R...R...R..
   b7044:	55dd 000b                                   .U..

000b7048 <_ZTV7TwoWire>:
	...
   b7050:	5349 000b 5393 000b 536b 000b 534b 000b     IS...S..kS..KS..
   b7060:	5373 000b 537b 000b 5383 000b 538b 000b     sS..{S...S...S..

000b7070 <_ZTV9IPAddress>:
	...
   b7078:	5475 000b 5465 000b 5467 000b 7061 0070     uT..eT..gT..app.

000b7088 <_ZTVN5spark12NetworkClassE>:
	...
   b7090:	5565 000b 556f 000b 5579 000b 5583 000b     eU..oU..yU...U..
   b70a0:	558d 000b 5599 000b 55a5 000b 55ad 000b     .U...U...U...U..
   b70b0:	55b5 000b 55c1 000b 55c9 000b 55d3 000b     .U...U...U...U..
   b70c0:	55dd 000b 616e 006e 6e69 0066 766f 0066     .U..nan.inf.ovf.
   b70d0:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b70e0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b70ec <_ZTV11USARTSerial>:
	...
   b70f4:	5b41 000b 5bad 000b 5b85 000b 56c9 000b     A[...[...[...V..
   b7104:	5b55 000b 5b71 000b 5b63 000b 5b7f 000b     U[..q[..c[...[..
   b7114:	5b43 000b 5b47 000b                         C[..G[..

000b711c <_ZTV9USBSerial>:
	...
   b7124:	5beb 000b 5c53 000b 5c29 000b 56c9 000b     .[..S\..)\...V..
   b7134:	5c1b 000b 5bed 000b 5bfd 000b 5c4d 000b     .\...[...[..M\..
   b7144:	5c0d 000b 5be5 000b                         .\...[..

000b714c <_ZTVN5spark9WiFiClassE>:
	...
   b7154:	5d4b 000b 5d41 000b 5d37 000b 5ced 000b     K]..A]..7]...\..
   b7164:	5d2b 000b 5d1f 000b 55a5 000b 55ad 000b     +]...]...U...U..
   b7174:	5d13 000b 5d0b 000b 5d01 000b 5cf7 000b     .]...]...]...\..
   b7184:	55dd 000b                                   .U..

000b7188 <_ZSt7nothrow>:
   b7188:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7198:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b71a8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b71b8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b71c8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b71d8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b71e8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b71f9 <link_const_variable_data_end>:
   b71f9:	00          	.byte	0x00
	...

000b71fc <link_constructors_location>:
   b71fc:	000b4309 	.word	0x000b4309
   b7200:	000b4d8d 	.word	0x000b4d8d
   b7204:	000b5335 	.word	0x000b5335
   b7208:	000b5555 	.word	0x000b5555
   b720c:	000b56b5 	.word	0x000b56b5
   b7210:	000b5941 	.word	0x000b5941
   b7214:	000b5b09 	.word	0x000b5b09
   b7218:	000b5b2d 	.word	0x000b5b2d
   b721c:	000b5d55 	.word	0x000b5d55
